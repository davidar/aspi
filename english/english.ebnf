%import common.WS
%ignore WS

ADJ: "big" | "red" | "tall" | "narrow" | "mine" | "blue" | "green" | "large" | "small" | "short" | "little" | "wide" | "mine"
DET: "that" | "any" | "an" | "a" | "the"
NOUN: "block" | "pyramid" | "box" | "cube" | "table" | "thing" | "colour" | "object" | "steeple" | "superblock"
PREP: "into" | "onto" | "in" | "on top of" | "on" | "behind" | "above"
PREPT: "before" | "while" | "during" | "just before"
VERB: "pick" | "contain" | "support" | "own" | "touch" | "hold" | "clean" | "exist"
VERBP: "up" | "off"
DIR: "left" | "right"
_BE: "is" | "are" | "was" | "were"
_NOT: "not" | "n't"
_DO: "do" | "does" | "did"
WH: "when" | "why" | "how"
TIME: "now"

?start: ["will you"] ["please"] command
      | question
      | statement
command: verb np
       | "put" np prep np -> put
       | ("build" | "make") np -> build
question: "find" np
        | "which" ["of"] np vp
	| "what" vp
        | q
q: "what" _DO np verb [time] -> flipjoin
 | ("how many" | "count") np [vp] -> count
 | WH [_DO "you" vp] -> join
statement: np vp
verb: verbp
    | _DO _NOT verb -> neg
verbp: VERB ["s" | "ed" | "-ed"] [VERBP]
np: [det] ADJ* NOUN ["s" | "es"] [relcl]
  | "what" vp
  | ("that" | "those") -> that
  | ["either"] np "or" np -> disj
  | "the" ("most" ADJ | ADJ ["-"] "est") np -> most
  | "it" | "them" -> it
  | "a stack of two" np ["and" np] -> stack
  | "the" NOUN "of" np -> join
det: DET
relcl: "which" vp -> conj
     | "which" np verb -> flipjoin
vp: vp2 (("and" | "but") vp2)* -> conj
?vp2: _BE scomp
    | _BE _NOT scomp -> neg
    | verb [np] [time] -> joint
    | VERB "that" VERBP -> verbpthat
    | ("I told you" | "you were told") "to" verbp -> commanded
    | "put" np "on" np -> put_on
?scomp: ADJ
      | ADJ ["-"] "er than" np -> join
      | ADJ ["-"] "er than" ("each" | "every") np -> each
      | "not as" ADJ "as" np -> flipjoin2
      | ["being"] verb ["by" np] [time] -> flipjoin2
      | prep np [time] -> joint
      | np
prep: PREP
    | "to the" DIR "of"
time: prept event -> join
    | TIME
prept: PREPT
event: ("I told you" | "you were told") "to" command -> told
     | ["you were doing"] "that" -> that
     | np _BE verbp -> rjoin
