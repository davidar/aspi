>>> % PICK UP A BIG RED BLOCK.
>>> goal_once$holding[big red block]
--> goal_once(holding(A)) :- big(A), red(A), block(A).
apply(pickup(green_cube_1),1).
apply(put_on(green_cube_1,blue_block),2).
plan_interval(1,1,3).
apply(pickup(big_red),3).
moves(3).
ok.

>>> 
>>> % GRASP THE PYRAMID.
>>> goal$holding[pyramid]
--> goal(holding(A)) :- pyramid(A).
I CAN'T

>>> 
>>> % FIND A BLOCK WHICH IS TALLER THAN THE ONE YOU ARE HOLDING AND PUT IT INTO THE BOX.
>>> :def holding(X) :- holds(holding(X)).
understood.

>>> goal_once$on[block taller_than.holding, box]
--> goal_once(on(B,C)) :- block(B), taller_than(B,A), holding(A), box(C).
apply(put_on(big_red,table_back_left),4).
apply(pickup(green_cube_1),5).
apply(put_on(green_cube_1,table_front_left),6).
apply(pickup(blue_block),7).
plan_interval(2,4,8).
apply(put_on(blue_block,box),8).
moves(8).
ok.

>>> 
>>> % WHAT DOES THE BOX CONTAIN?
>>> :def holds(above(A,B), TIME) :- holds(on(A,B), TIME).
understood.

>>> :def holds(above(A,C), TIME) :- holds(above(A,B), TIME), holds(above(B,C), TIME).
understood.

>>> :def above(A,B) :- holds(above(A,B)).
understood.

>>> [above.box]
--> show(B) :- above(B,A), box(A).
blue_block.
blue_pyramid.

>>> 
>>> % WHAT IS THE PYRAMID SUPPORTED BY?
>>> :def holds(supports(A,B), TIME) :- holds(on(B,A), TIME).
understood.

>>> :def supports(A,B) :- holds(supports(A,B)).
understood.

>>> [supports[that pyramid]]
--> show(B) :- supports(B,A), that(A), pyramid(A).
box.

>>> 
>>> % HOW MANY BLOCKS ARE NOT IN THE BOX?
>>> [block ~above.box]
--> show(C) :- block(C), not lifted1(C).
    lifted1(B) :- above(B,A), box(A).
big_red.
red_cube.
green_cube_1.
green_cube_2.

>>> 
>>> % IS AT LEAST ONE OF THEM NARROWER THAN THE ONE WHICH I TOLD YOU TO PICK UP?
>>> [that narrower_than.history$goal$holding]
--> show(B) :- that(B), narrower_than(B,A), history(goal(holding(A))).
red_cube.

>>> 
>>> % IS IT SUPPORTED?
>>> [supports.that]
--> show(B) :- supports(B,A), that(A).
table_front_left.

>>> 
>>> % CAN THE TABLE PICK UP BLOCKS?
>>> [exists(table action$pickup.block)]
--> show(C) :- exists1(C).
    exists1(true) :- table(B), action(pickup(B,A)), block(A).
    exists1(false) :- not exists1(true).
false.

>>> 
>>> % CAN A PYRAMID BE SUPPORTED BY A BLOCK?
>>> [exists(pyramid action$put_on.block)]
--> show(C) :- exists1(C).
    exists1(true) :- pyramid(B), action(put_on(B,A)), block(A).
    exists1(false) :- not exists1(true).
true.

>>> 
>>> % CAN A PYRAMID SUPPORT A PYRAMID?
>>> [exists(pyramid action$put_on.pyramid)]
--> show(C) :- exists1(C).
    exists1(true) :- pyramid(B), action(put_on(B,A)), pyramid(A).
    exists1(false) :- not exists1(true).
false.

>>> 
>>> % STACK UP TWO PYRAMIDS.
>>> goal_once$on[pyramid, pyramid]
--> goal_once(on(A,B)) :- pyramid(A), pyramid(B).
I CAN'T

>>> 
>>> % WILL YOU PLEASE STACK UP BOTH OF THE RED BLOCKS AND EITHER A GREEN CUBE OR A PYRAMID?
>>> :def holds(stack(A,B,C; A,C,B; B,A,C; B,C,A; C,A,B; C,B,A), TIME) :- holds(on(A,B), TIME), holds(on(B,C), TIME), not table(C), C != box.
understood.

>>> goal_once$stack[red block, red block, green cube | pyramid]
--> goal_once(stack(A,B,D)) :- red(A), block(A), red(B), block(B), disjunction1(D).
    disjunction1(C) :- green(C), cube(C).
    disjunction1(C) :- pyramid(C).
apply(pickup(green_pyramid),9).
apply(put_on(green_pyramid,blue_block),10).
apply(pickup(red_cube),11).
apply(put_on(red_cube,green_cube_2),12).
apply(pickup(big_red),13).
plan_interval(11,9,14).
apply(put_on(big_red,red_cube),14).
moves(14).
ok.

>>> 
>>> % WHICH CUBE IS SITTING ON THE TABLE?
>>> :def on(A,B) :- holds(on(A,B)).
understood.

>>> [cube on.table]
--> show(B) :- cube(B), on(B,A), table(A).
green_cube_1.
green_cube_2.

>>> 
>>> % IS THERE A LARGE BLOCK BEHIND A PYRAMID?
>>> :def holds(behind(B,A), TIME) :- holds(above(B,X), TIME), holds(above(A,Y), TIME), table(X), table(Y), holds(behind(X,Y), TIME).
understood.

>>> :def behind(B,A) :- holds(behind(B,A)).
understood.

>>> [large block behind.pyramid]
--> show(B) :- large(B), block(B), behind(B,A), pyramid(A).
blue_block.

>>> 
>>> % PUT A SMALL ONE ONTO THE GREEN CUBE WHICH SUPPORTS A PYRAMID.
>>> goal_once$on[small block, green cube supports.pyramid]
--> goal_once(on(A,C)) :- small(A), block(A), green(C), cube(C), supports(C,B), pyramid(B).
already(on(red_cube,green_cube_2)).

>>> 
>>> % PUT THE LITTLEST PYRAMID ON TOP OF IT.
>>> :def that(X) :- history(counter-1, goal(on(X,_))).
understood.

>>> goal_once$on[most(little, pyramid), that]
--> goal_once(on(B,C)) :- little(B,A) : pyramid(A), B != A; pyramid(B), that(C).
apply(pickup(big_red),15).
apply(put_on(big_red,table_back_left),16).
apply(pickup(green_pyramid),17).
plan_interval(15,15,18).
apply(put_on(green_pyramid,red_cube),18).
moves(18).
ok.

>>> 
>>> % DOES THE SHORTEST THING THE TALLEST PYRAMID'S SUPPORT SUPPORTS SUPPORT ANYTHING GREEN?
>>> [green on.most(short, on.supports.most(tall, pyramid))]
--> show(G) :- green(G), on(G,F), short(F,D) : superlative1(D), F != D; superlative1(F).
    superlative1(E) :- on(E,C), supports(C,B), tall(B,A) : pyramid(A), B != A; pyramid(B).
green_pyramid.

>>> 
>>> % WHAT COLOR IS IT?
>>> [colour.supports.that]
--> show(C) :- colour(C,B), supports(B,A), that(A).
red.

>>> 
>>> % HOW MANY THINGS ARE ON TOP OF GREEN CUBES?
>>> [above[green cube]]
--> show(B) :- above(B,A), green(A), cube(A).
red_cube.
red_pyramid.
green_pyramid.

>>> 
>>> % HAD YOU TOUCHED ANY PYRAMID BEFORE YOU PUT THE GREEN ONE ON THE LITTLE CUBE?
>>> :macro before(E,F) :- end_time(S,E), S < T, start_time(T,F).
>>> [pickup.pyramid before.goal.=on[green pyramid, little cube]]
--> show(F) :- green(B), pyramid(B), little(C), cube(C), pickup(F,A), pyramid(A), end_time(G,F), G < H, start_time(H,E), goal(E,D), D = on(B,C).
apply(pickup(green_pyramid),9).

>>> 
>>> % WHEN DID YOU PICK IT UP?
>>> :def event(history(C,G)) :- history(C,G).
understood.

>>> :macro during(E,F) :- start_time(S1,E), end_time(S2,E), start_time(T1,F), end_time(T2,F), T1 <= S1, S2 <= T2, E != F.
>>> [event during'.that]
--> show(B) :- event(B), start_time(C,A), end_time(D,A), start_time(E,B), end_time(F,B), E <= C, D <= F, A != B, that(A).
history(11,goal(stack(red_cube,big_red,green_cube_2))).

>>> 
>>> % WHY?
>>> [why.that.2]
--> show(C) :- why(C,B), that(B,A), A = 2.
apply(put_on(green_pyramid,blue_block),10).
apply(pickup(red_cube),11).
apply(put_on(big_red,red_cube),14).

>>> 
>>> % WHY DID YOU DO THAT?
>>> [why.that]
--> show(B) :- why(B,A), that(A).
goal(stack(red_cube,big_red,green_cube_2)).
apply(pickup(big_red),13).
apply(pickup(red_cube),11).
apply(put_on(red_cube,green_cube_2),12).

>>> [why.that]
--> show(B) :- why(B,A), that(A).
apply(put_on(red_cube,green_cube_2),12).
apply(pickup(big_red),13).
history(11,goal(stack(red_cube,big_red,green_cube_2))).
apply(put_on(big_red,red_cube),14).

>>> 
>>> % HOW DID YOU DO IT?
>>> :def event(apply(A,T)) :- apply(A,T).
understood.

>>> [event during.that]
--> show(B) :- event(B), start_time(C,B), end_time(D,B), start_time(E,A), end_time(F,A), E <= C, D <= F, B != A, that(A).
apply(put_on(red_cube,green_cube_2),12).
apply(put_on(green_pyramid,blue_block),10).
apply(pickup(big_red),13).
apply(pickup(green_pyramid),9).
apply(pickup(red_cube),11).
apply(put_on(big_red,red_cube),14).

>>> 
>>> % HOW MANY OBJECTS DID YOU TOUCH WHILE YOU WERE DOING IT?
>>> [count(that =apply(pickup(_),_))]
--> show(B) :- B = #count { A : that(A), A = apply(pickup(_),_) }.
3.

>>> 
>>> % WHAT DID THE RED CUBE SUPPORT BEFORE YOU STARTED TO CLEAN IT OFF?
>>> :def cleanoff(X,T) :- apply(pickup(Y), T), holds(on(Y,X), T-1).
understood.

>>> show(X) :- holds(on(X,red_cube),S), S < T, cleanoff(red_cube, T).
green_pyramid.
big_red.

>>> 
>>> % THERE WERE FIVE BLOCKS TO THE LEFT OF THE BOX THEN.
>>> :def holds(left_of(B,A), TIME) :- holds(above(B,X), TIME), holds(above(A,Y), TIME), table(X), table(Y), holds(left_of(X,Y), TIME).
understood.

>>> show(X) :- cleanoff(red_cube,T), block(X), holds(left_of(X,box), T-1).
big_red.
red_cube.
green_cube_1.

>>> [count(that)]
--> show(B) :- B = #count { A : that(A) }.
3.

>>> 
>>> % PUT THE BLUE PYRAMID ON THE BLOCK IN THE BOX.
>>> goal$on[blue pyramid, block above.box]
--> goal(on(A,C)) :- blue(A), pyramid(A), block(C), above(C,B), box(B).
apply(pickup(blue_pyramid),19).
plan_interval(29,19,20).
apply(put_on(blue_pyramid,blue_block),20).
moves(20).
ok.

>>> 
>>> % IS THERE ANYTHING WHICH IS BIGGER THAN EVERY PYRAMID BUT IS NOT AS WIDE AS THE THING THAT SUPPORTS IT?
>>> [X object every(bigger_than, pyramid) on.wider_than.X]
--> show(D) :- D = MuX, object(D), bigger_than(D,A) : pyramid(A); on(D,C), wider_than(C,B), B = MuX.
blue_block.

>>> 
>>> % A "STEEPLE" IS A STACK WHICH CONTAINS TWO GREEN CUBES AND A PYRAMID.
>>> :def holds(steeple, TIME) :- holds(stack(A,B,C), TIME), green(A), cube(A), green(B), cube(B), A != B, pyramid(C).
understood.

>>> 
>>> % ARE THERE ANY STEEPLES NOW?
>>> show(true) :- holds(steeple). \
... show(false) :- not holds(steeple).
false.

>>> 
>>> % BUILD ONE.
>>> goal(steeple).
apply(pickup(red_pyramid),21).
apply(put_on(red_pyramid,big_red),22).
apply(pickup(green_pyramid),23).
apply(put_on(green_pyramid,big_red),24).
apply(pickup(red_cube),25).
apply(put_on(red_cube,box),26).
apply(pickup(green_cube_2),27).
apply(put_on(green_cube_2,green_cube_1),28).
apply(pickup(green_pyramid),29).
plan_interval(32,21,30).
apply(put_on(green_pyramid,green_cube_2),30).
moves(30).
ok.

>>> 
>>> % CALL THE BIGGEST BLOCK "SUPERBLOCK".
>>> :def superblock[most(big, block)]
--> :def superblock(B) :- big(B,A) : block(A), B != A; block(B).
understood.

>>> 
>>> % HAVE YOU PICKED SUPERBLOCK UP SINCE WE BEGAN?
>>> :def picked_up(X) :- apply(pickup(X),T).
understood.

>>> [exists(superblock picked_up)]
--> show(B) :- exists1(B).
    exists1(true) :- superblock(A), picked_up(A).
    exists1(false) :- not exists1(true).
true.

>>> 
>>> % WHY DID YOU DROP IT?
>>> [why.=put_on[superblock, table]]
--> show(D) :- superblock(A), table(B), why(D,C), C = put_on(A,B).
nonexistent.

>>> 
>>> % IS THERE ANYTHING TO THE RIGHT OF THE RED PYRAMID?
>>> :def holds(right_of(A,B), TIME) :- holds(left_of(B,A), TIME).
understood.

>>> :def right_of(A,B) :- holds(right_of(A,B)).
understood.

>>> goal_once$left_of[red pyramid, box]
--> goal_once(left_of(A,B)) :- red(A), pyramid(A), box(B).
already(left_of(red_pyramid,box)).

>>> [right_of[red pyramid]]
--> show(B) :- right_of(B,A), red(A), pyramid(A).
box.
blue_block.
red_cube.
blue_pyramid.

>>> 
>>> thanks.
YOU'RE WELCOME!
