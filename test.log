>>> % PICK UP A BIG RED BLOCK.
>>> goal_once(holding(X)) :- large(X), red(X), block(X).
apply(pickup(green_cube_1),1).
apply(put_on(green_cube_1,table_front_right),2).
plan_interval(1,1,3).
apply(pickup(big_red),3).
moves(3).
ok.

>>> 
>>> % GRASP THE PYRAMID.
>>> goal(holding(X)) :- pyramid(X).
I CAN'T

>>> 
>>> % FIND A BLOCK WHICH IS TALLER THAN THE ONE YOU ARE HOLDING AND PUT IT INTO THE BOX.
>>> goal_once(on(T, box)) :- block(T), taller_than(T,H), block(H), holds(holding(H)).
apply(put_on(big_red,table_back_left),4).
apply(pickup(blue_block),5).
plan_interval(2,4,6).
apply(put_on(blue_block,box),6).
moves(6).
ok.

>>> 
>>> % WHAT DOES THE BOX CONTAIN?
>>> :def holds(above(A,B), TIME) :- holds(on(A,B), TIME).
understood.

>>> :def holds(above(A,C), TIME) :- holds(above(A,B), TIME), holds(above(B,C), TIME).
understood.

>>> :def holds(in_box(X), TIME) :- holds(above(X, box), TIME).
understood.

>>> show(X) :- holds(in_box(X)).
blue_block.
blue_pyramid.

>>> 
>>> % WHAT IS THE PYRAMID SUPPORTED BY?
>>> show(S) :- it(X), pyramid(X), holds(on(X,S)).
box.

>>> 
>>> % HOW MANY BLOCKS ARE NOT IN THE BOX?
>>> show(X) :- block(X), not holds(on(X, box)).
big_red.
red_cube.
green_cube_1.
green_cube_2.

>>> 
>>> % IS AT LEAST ONE OF THEM NARROWER THAN THE ONE WHICH I TOLD YOU TO PICK UP?
>>> show(X) :- it(X), narrower_than(X,Y), history(goal(holding(Y))).
red_cube.

>>> 
>>> % IS IT SUPPORTED?
>>> show(on(X,Y)) :- it(X), holds(on(X,Y)).
on(red_cube,table_front_left).

>>> 
>>> % CAN THE TABLE PICK UP BLOCKS?
>>> show(true) :- action(pickup(A,B)), table(A), block(B). \
... show(false) :- not show(true).
false.

>>> 
>>> % CAN A PYRAMID BE SUPPORTED BY A BLOCK?
>>> show(true) :- action(put_on(P,B)), pyramid(P), block(B). \
... show(false) :- not show(true).
true.

>>> 
>>> % CAN A PYRAMID SUPPORT A PYRAMID?
>>> show(true) :- action(put_on(P,Q)), pyramid(P), pyramid(Q). \
... show(false) :- not show(true).
false.

>>> 
>>> % STACK UP TWO PYRAMIDS.
>>> goal_once(on(P,Q)) :- pyramid(P), pyramid(Q).
I CAN'T

>>> 
>>> % WILL YOU PLEASE STACK UP BOTH OF THE RED BLOCKS AND EITHER A GREEN CUBE OR A PYRAMID?
>>> :def holds(stack(A,B,C; A,C,B; B,A,C; B,C,A; C,A,B; C,B,A), TIME) :- holds(on(A,B), TIME), holds(on(B,C), TIME), not table(C), C != box.
understood.

>>> green_cube_or_pyramid(C) :- green(C), cube(C). \
... green_cube_or_pyramid(C) :- pyramid(C). \
... goal_once(stack(A,B,C)) :- red(A), block(A), red(B), block(B), A != B, green_cube_or_pyramid(C).
apply(pickup(green_cube_1),7).
apply(put_on(green_cube_1,big_red),8).
apply(pickup(green_pyramid),9).
apply(put_on(green_pyramid,big_red),10).
apply(pickup(red_cube),11).
plan_interval(11,7,12).
apply(put_on(red_cube,green_cube_1),12).
moves(12).
ok.

>>> 
>>> % WHICH CUBE IS SITTING ON THE TABLE?
>>> show(X) :- cube(X), holds(on(X,T)), table(T). \
... show(on(Y,X)) :- cube(X), holds(on(X,T)), table(T), holds(on(Y,X)).
green_cube_2.
on(red_pyramid,green_cube_2).

>>> 
>>> % IS THERE A LARGE BLOCK BEHIND A PYRAMID?
>>> :def holds(behind(B,A), TIME) :- holds(above(B,X), TIME), holds(above(A,Y), TIME), table(X), table(Y), holds(behind(X,Y), TIME).
understood.

>>> show(X) :- large(X), block(X), holds(behind(X,P)), pyramid(P).
big_red.
blue_block.
green_cube_1.

>>> 
>>> % PUT A SMALL ONE ONTO THE GREEN CUBE WHICH SUPPORTS A PYRAMID.
>>> goal_once(on(S,C)) :- small(S), block(S), green(C), cube(C), holds(on(P,C)), pyramid(P).
apply(pickup(red_cube),13).
plan_interval(14,13,14).
apply(put_on(red_cube,green_cube_2),14).
moves(14).
ok.

>>> 
>>> % PUT THE LITTLEST PYRAMID ON TOP OF IT.
>>> smallest_pyramid(X) :- pyramid(X), smaller_than(X,P) : pyramid(P), P != X. \
... goal(on(P,S)) :- history(counter-1, goal(on(S,_))), smallest_pyramid(P).
apply(pickup(green_pyramid),15).
plan_interval(15,15,16).
apply(put_on(green_pyramid,red_cube),16).
moves(16).
ok.

>>> 
>>> % DOES THE SHORTEST THING THE TALLEST PYRAMID'S SUPPORT SUPPORTS SUPPORT ANYTHING GREEN?
>>> tallest_pyramid_support(S) :- holds(on(P,S)), pyramid(P), taller_than(P,Q) : pyramid(Q), P != Q. \
... tps_supports(X) :- tallest_pyramid_support(S), holds(on(X,S)). \
... shortest_tpss(X) :- tps_supports(X), shorter_than(X,Y) : tps_supports(Y), X != Y. \
... show(Y) :- shortest_tpss(X), holds(on(Y,X)), green(Y).
green_pyramid.

>>> 
>>> % WHAT COLOR IS IT?
>>> show(C) :- it(Y), holds(on(Y,X)), colour(C,X).
red.

>>> 
>>> % HOW MANY THINGS ARE ON TOP OF GREEN CUBES?
>>> show(X) :- holds(above(X,C)), green(C), cube(C).
red_cube.
red_pyramid.
green_pyramid.

>>> 
>>> % HAD YOU TOUCHED ANY PYRAMID BEFORE YOU PUT THE GREEN ONE ON THE LITTLE CUBE?
>>> :def touched_pyramid_before(P,S) :- pyramid(P), apply(pickup(P),S), S < T-1, green(X), pyramid(X), apply(put_on(X,C),T), small(C), cube(C).
understood.

>>> show(P) :- touched_pyramid_before(P,S).
green_pyramid.

>>> 
>>> % WHEN DID YOU PICK IT UP?
>>> show(goal(G)) :- touched_pyramid_before(P,S), plan_interval(C, T1, T2), T1 <= S, S <= T2, history(C, goal(G)).
goal(stack(red_cube,big_red,green_cube_1)).

>>> 
>>> % WHY?
>>> :def explain(apply(X,S), (apply(A,T), demands(A,F,true)))  :- adds(X,F),    plan_interval(C, T1, T2), T1 <= S, S <= T2, demands(A,F,true),  apply(A,T), S < T, T <= T2, S = 1..now.
understood.

>>> :def explain(apply(X,S), (apply(A,T), demands(A,F,false))) :- deletes(X,F), plan_interval(C, T1, T2), T1 <= S, S <= T2, demands(A,F,false), apply(A,T), S < T, T <= T2, S = 1..now.
understood.

>>> show(R) :- touched_pyramid_before(P,S), explain(apply(pickup(P),S), R).
(apply(pickup(red_cube),11),demands(pickup(red_cube),on(green_pyramid,red_cube),false)).
(apply(put_on(green_pyramid,big_red),10),demands(put_on(green_pyramid,big_red),holding(green_pyramid),true)).

>>> 
>>> % WHY DID YOU CLEAR OFF THAT CUBE?
>>> show(R) :- it((A, demands(pickup(C),on(Y,C),false))), cube(C), explain(A,R).
(apply(put_on(red_cube,green_cube_1),12),demands(put_on(red_cube,green_cube_1),holding(red_cube),true)).

>>> 
>>> % WHY DID YOU DO THAT?
>>> :def explain(apply(A,T), goal(G)) :- plan_interval(C,S,T), history(C, goal(G)), action(A).
understood.

>>> show(R) :- it((A,D)), explain(A,R).
goal(stack(red_cube,big_red,green_cube_1)).

>>> 
>>> % WHY DID YOU DO THAT?
>>> :def explain(goal(G), history(C, goal(G))) :- history(C, goal(G)).
understood.

>>> show(R) :- it(G), explain(G,R).
history(11,goal(stack(red_cube,big_red,green_cube_1))).

>>> 
>>> % HOW DID YOU DO IT?
>>> :def steps(C, apply(A,T)) :- plan_interval(C, T1, T2), apply(A,T), T = T1..T2.
understood.

>>> show(A) :- it(history(C,G)), steps(C,A).
apply(pickup(green_cube_1),7).
apply(put_on(green_cube_1,big_red),8).
apply(pickup(green_pyramid),9).
apply(put_on(green_pyramid,big_red),10).
apply(pickup(red_cube),11).
apply(put_on(red_cube,green_cube_1),12).

>>> 
>>> % HOW MANY OBJECTS DID YOU TOUCH WHILE YOU WERE DOING IT?
>>> show(X) :- it(apply(pickup(X), T)).
green_cube_1.
green_pyramid.
red_cube.

>>> 
>>> % WHAT DID THE RED CUBE SUPPORT BEFORE YOU STARTED TO CLEAN IT OFF?
>>> :def cleanoff(X,T) :- apply(pickup(Y), T), holds(on(Y,X), T-1).
understood.

>>> show(X) :- holds(on(X,red_cube),S), S < T, cleanoff(red_cube, T).
green_pyramid.

>>> 
>>> % THERE WERE FIVE BLOCKS TO THE LEFT OF THE BOX THEN.
>>> :def holds(left_of(B,A), TIME) :- holds(above(B,X), TIME), holds(above(A,Y), TIME), table(X), table(Y), holds(left_of(X,Y), TIME).
understood.

>>> show(X) :- cleanoff(red_cube,T), block(X), holds(left_of(X,box), T-1).
big_red.
red_cube.
green_cube_1.

>>> show(N) :- #count { X : it(X) } = N.
3.

>>> 
>>> % PUT THE BLUE PYRAMID ON THE BLOCK IN THE BOX.
>>> goal(on(blue_pyramid,B)) :- block(B), holds(on(B,box)).
apply(pickup(blue_pyramid),17).
plan_interval(30,17,18).
apply(put_on(blue_pyramid,blue_block),18).
moves(18).
ok.

>>> 
>>> % IS THERE ANYTHING WHICH IS BIGGER THAN EVERY PYRAMID BUT IS NOT AS WIDE AS THE THING THAT SUPPORTS IT?
>>> show(X) :- object(X), bigger_than(X,P) : pyramid(P); holds(on(X,B)), wider_than(B,X).
blue_block.

>>> 
>>> % A "STEEPLE" IS A STACK WHICH CONTAINS TWO GREEN CUBES AND A PYRAMID.
>>> :def holds(steeple, TIME) :- holds(stack(A,B,C), TIME), green(A), cube(A), green(B), cube(B), A != B, pyramid(C).
understood.

>>> 
>>> % ARE THERE ANY STEEPLES NOW?
>>> show(true) :- holds(steeple). \
... show(false) :- not holds(steeple).
false.

>>> 
>>> % BUILD ONE.
>>> goal(steeple).
apply(pickup(green_pyramid),19).
apply(put_on(green_pyramid,table_front_left),20).
apply(pickup(red_pyramid),21).
apply(put_on(red_pyramid,table_front_right),22).
apply(pickup(red_cube),23).
apply(put_on(red_cube,blue_block),24).
apply(pickup(green_cube_2),25).
apply(put_on(green_cube_2,green_cube_1),26).
apply(pickup(green_pyramid),27).
plan_interval(33,19,28).
apply(put_on(green_pyramid,green_cube_2),28).
moves(28).
ok.

>>> 
>>> % CALL THE BIGGEST BLOCK "SUPERBLOCK".
>>> :def superblock(B) :- block(B), bigger_than(B,X) : block(X), X != B.
understood.

>>> 
>>> % HAVE YOU PICKED SUPERBLOCK UP SINCE WE BEGAN?
>>> picked_up(X) :- apply(pickup(X),T). \
... show(true) :- picked_up(B), superblock(B). \
... show(false) :- not picked_up(B), superblock(B).
true.

>>> 
>>> % WHY DID YOU DROP IT?
>>> :def explain(A,R) :- apply(A,T), explain(apply(A,T), R).
understood.

>>> :def explain(A, nonexistent) :- action(A), not apply(A,T) : T = 1..now.
understood.

>>> show(R) :- explain(put_on(B,T),R), superblock(B), table(T).
nonexistent.

>>> 
>>> % IS THERE ANYTHING TO THE RIGHT OF THE RED PYRAMID?
>>> :def holds(right_of(A,B), TIME) :- holds(left_of(B,A), TIME).
understood.

>>> goal_once(left_of(red_pyramid,box)).
apply(pickup(red_pyramid),29).
plan_interval(36,29,30).
apply(put_on(red_pyramid,table_back_left),30).
moves(30).
ok.

>>> show(X) :- holds(right_of(X,P)), red(P), pyramid(P).
box.
blue_block.
red_cube.
blue_pyramid.

>>> 
>>> thanks.
YOU'RE WELCOME!
