>>> #enum customer: mailing_state="Bihar"   billing_state="Bihar"  ip_address_state="Bihar"
...               |                         billing_state="Kerala" ip_address_state="Kerala"
...               |                                                ip_address_state="Punjab"
...               | mailing_state="Gujarat" billing_state="Punjab" ip_address_state="Gujarat"
...               .
--> customer(customer_(1)).
    customer(1,customer_(1)).
    mailing_state(customer_(1),"Bihar").
    billing_state(customer_(1),"Bihar").
    ip_address_state(customer_(1),"Bihar").
    customer(customer_(2)).
    customer(2,customer_(2)).
    billing_state(customer_(2),"Kerala").
    ip_address_state(customer_(2),"Kerala").
    customer(customer_(3)).
    customer(3,customer_(3)).
    ip_address_state(customer_(3),"Punjab").
    customer(customer_(4)).
    customer(4,customer_(4)).
    mailing_state(customer_(4),"Gujarat").
    billing_state(customer_(4),"Punjab").
    ip_address_state(customer_(4),"Gujarat").
understood.

>>> 
>>> #enum user: email="asdf@fake.com"
...           | email="bob@builder.com"
...           | email="asdf@fake.com"
...           .
--> user(user_(1)).
    user(1,user_(1)).
    email(user_(1),"asdf@fake.com").
    user(user_(2)).
    user(2,user_(2)).
    email(user_(2),"bob@builder.com").
    user(user_(3)).
    user(3,user_(3)).
    email(user_(3),"asdf@fake.com").
understood.

>>> 
>>> #mode genus(out,out) is multi.
>>> #enum plant: genus="Astragalus" species="annularis"
...            | genus="Astragalus" species="anisus"
...            | genus="Astragalus" species="annularis"
...            | genus="Eugenia" species="fulva"
...            | genus="Eugenia" species="foetida"
...            | genus="Eugenia" species="lamprophylla"
...            .
--> plant(plant_(1)).
    plant(1,plant_(1)).
    genus(plant_(1),"Astragalus").
    species(plant_(1),"annularis").
    plant(plant_(2)).
    plant(2,plant_(2)).
    genus(plant_(2),"Astragalus").
    species(plant_(2),"anisus").
    plant(plant_(3)).
    plant(3,plant_(3)).
    genus(plant_(3),"Astragalus").
    species(plant_(3),"annularis").
    plant(plant_(4)).
    plant(4,plant_(4)).
    genus(plant_(4),"Eugenia").
    species(plant_(4),"fulva").
    plant(plant_(5)).
    plant(5,plant_(5)).
    genus(plant_(5),"Eugenia").
    species(plant_(5),"foetida").
    plant(plant_(6)).
    plant(6,plant_(6)).
    genus(plant_(6),"Eugenia").
    species(plant_(6),"lamprophylla").
understood.

>>> 
>>> #enum owner: maher | rishi | chandra.
--> owner(owner_(1)).
    owner(1,owner_(1)).
    maher(owner_(1)).
    owner(owner_(2)).
    owner(2,owner_(2)).
    rishi(owner_(2)).
    owner(owner_(3)).
    owner(3,owner_(3)).
    chandra(owner_(3)).
understood.

>>> 
>>> #enum pet: pet_owner=owner.1 type="dog"
...          | pet_owner=owner.1 type="cat"
...          | pet_owner=owner.2 type="dog"
...          | pet_owner=owner.2 type="parakeet"
...          .
--> pet(pet_(1)).
    pet(1,pet_(1)).
    pet_owner(pet_(1),A) :- owner(1,A).
    type(pet_(1),"dog").
    pet(pet_(2)).
    pet(2,pet_(2)).
    pet_owner(pet_(2),B) :- owner(1,B).
    type(pet_(2),"cat").
    pet(pet_(3)).
    pet(3,pet_(3)).
    pet_owner(pet_(3),C) :- owner(2,C).
    type(pet_(3),"dog").
    pet(pet_(4)).
    pet(4,pet_(4)).
    pet_owner(pet_(4),D) :- owner(2,D).
    type(pet_(4),"parakeet").
understood.

>>> 
>>> #enum dog: dog_owner="ken"   name="darcy"
...          | dog_owner="bob"   name="darcy"
...          | dog_owner="bob"   name="lassie"
...          | dog_owner="ahmed" name="darcy"
...          | dog_owner="sara"  name="floof"
...          | dog_owner="sara"  name="lassie"
...          .
--> dog(dog_(1)).
    dog(1,dog_(1)).
    dog_owner(dog_(1),"ken").
    name(dog_(1),"darcy").
    dog(dog_(2)).
    dog(2,dog_(2)).
    dog_owner(dog_(2),"bob").
    name(dog_(2),"darcy").
    dog(dog_(3)).
    dog(3,dog_(3)).
    dog_owner(dog_(3),"bob").
    name(dog_(3),"lassie").
    dog(dog_(4)).
    dog(4,dog_(4)).
    dog_owner(dog_(4),"ahmed").
    name(dog_(4),"darcy").
    dog(dog_(5)).
    dog(5,dog_(5)).
    dog_owner(dog_(5),"sara").
    name(dog_(5),"floof").
    dog(dog_(6)).
    dog(6,dog_(6)).
    dog_owner(dog_(6),"sara").
    name(dog_(6),"lassie").
understood.

>>> 
>>> 
>>> % SELECT customer
>>> %        , COALESCE(
>>> %           mailing_state,
>>> %           billing_state,
>>> %           ip_address_state
>>> %        ) AS state
>>> % FROM addresses
>>> tuple(customer C, mailing_state.C || billing_state.C || ip_address_state.C)?
--> negation1(MuC,0) :- mailing_state(MuC,B), billing_state(MuC,C), customer(A), A = MuC.
    negation2(MuC,0) :- billing_state(MuC,C), ip_address_state(MuC,D), customer(A), A = MuC.
    disjunction1(MuC,B) :- mailing_state(MuC,B), customer(A), A = MuC.
    disjunction1(MuC,C) :- not negation1(MuC,0), billing_state(MuC,C), customer(A), A = MuC.
    disjunction1(MuC,D) :- not negation1(MuC,0), not negation2(MuC,0), ip_address_state(MuC,D), customer(A), A = MuC.
    what({A,E}) :- customer(A), A = MuC, disjunction1(MuC,E).
that: {customer_(1), "Bihar"} | {customer_(2), "Kerala"} | {customer_(3), "Punjab"} | {customer_(4), "Gujarat"}.

>>> 
>>> % SELECT email, COUNT(*)
>>> % FROM users
>>> % GROUP BY email
>>> % HAVING COUNT(*) > 1
>>> tuple(E email.user, count{{email=E}} (> 1))?
--> gather1(MuE,C) :- email(C,MuE), B = MuE, email(A,B), user(A).
    what({B,E}) :- B = MuE, email(A,B), user(A), count(D,E), sorted_solutions(gather1(MuE),D), E > 1.
that: {"asdf@fake.com", 4}.

>>> 
>>> % SELECT COUNT(DISTINCT species), genus
>>> % FROM plants
>>> % GROUP BY 2
>>> % ORDER BY 1 ASC
>>> tuple(count{species.genus=G}, G genus.plant)?
--> gather2(MuG,B) :- species(A,B), genus(A,MuG), F = MuG, genus(E,F), plant(E).
    what({D,F}) :- count(C,D), solutions(gather2(MuG),C), F = MuG, genus(E,F), plant(E).
that: {2, "Astragalus"} | {3, "Eugenia"}.

>>> 
>>> % SELECT owner
>>> % , SUM(CASE 
>>> %     WHEN type = 'dog' THEN 1 
>>> %     ELSE 0 END) AS num_dogs
>>> % , SUM(CASE 
>>> %     WHEN type = 'cat' THEN 1
>>> %     ELSE 0 END) AS num_cats
>>> % , SUM(CASE
>>> %     WHEN type NOT IN ('dog', 'cat') THEN 1
>>> %     ELSE 0 END) AS num_other
>>> % FROM pets
>>> % GROUP BY owner
>>> tuple(O pet_owner.pet, count{pet_owner=O type="dog"})?
--> gather3(MuO,C) :- pet_owner(C,MuO), type(C,"dog"), B = MuO, pet_owner(A,B), pet(A).
    what({B,E}) :- B = MuO, pet_owner(A,B), pet(A), count(D,E), solutions(gather3(MuO),D).
that: {maher, 1} | {rishi, 1}.

>>> tuple(O pet_owner.pet, count{pet_owner=O type="cat"})?
--> gather4(MuO,C) :- pet_owner(C,MuO), type(C,"cat"), B = MuO, pet_owner(A,B), pet(A).
    what({B,E}) :- B = MuO, pet_owner(A,B), pet(A), count(D,E), solutions(gather4(MuO),D).
that: {maher, 1} | {rishi, 0}.

>>> tuple(O pet_owner.pet, count{pet_owner=O type=(~"dog" ~"cat")})?
--> negation3("dog").
    negation4("cat").
    gather5(MuO,D) :- pet_owner(D,MuO), type(D,C), not negation3(C), not negation4(C), B = MuO, pet_owner(A,B), pet(A).
    what({B,F}) :- B = MuO, pet_owner(A,B), pet(A), count(E,F), solutions(gather5(MuO),E).
that: {maher, 0} | {rishi, 1}.

>>> 
>>> % SELECT owner
>>> % FROM dogs
>>> % WHERE name in (
>>> %   SELECT name
>>> %   FROM dogs
>>> %   GROUP BY name
>>> %   HAVING count(*) > 2)
>>> dog_owner.name=N :- count{name=N} > 2?
--> gather6(MuN,B) :- name(B,MuN), dog_owner(A,E), name(A,MuN).
    what(E) :- dog_owner(A,E), name(A,MuN), D > 2, count(C,D), solutions(gather6(MuN),C).
that: "ahmed" | "bob" | "ken".

>>> thanks.
YOU'RE WELCOME!
