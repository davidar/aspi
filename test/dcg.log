>>> #macro words[A,B]: (A ++ " ") ++ B.
--> words(MuA,MuB,(MuA ++ (" ")) ++ MuB).
understood.

>>> #type tree ---> s(tree,tree); np(string,string); vp(string,tree).
>>> sentence[s(N,V)]: words[noun_phrase.N, verb_phrase.V].
--> sentence(s(MuN,MuV),C) :- C = (A ++ (" ")) ++ B, noun_phrase(MuN,A), verb_phrase(MuV,B).
understood.

>>> noun_phrase[np(D,N)]: words[det D, noun N].
--> noun_phrase(np(MuD,MuN),C) :- C = (A ++ (" ")) ++ B, det(A), A = MuD, noun(B), B = MuN.
understood.

>>> verb_phrase[vp(V,N)]: words[verb V, noun_phrase.N].
--> verb_phrase(vp(MuV,MuN),C) :- C = (A ++ (" ")) ++ B, verb(A), A = MuV, noun_phrase(MuN,B).
understood.

>>> det: "a" | "the".
--> det(A) :- disjunction1(A).
    disjunction1("a").
    disjunction1("the").
understood.

>>> noun: "bat" | "cat".
--> noun(A) :- disjunction2(A).
    disjunction2("bat").
    disjunction2("cat").
understood.

>>> verb: "eats".
--> verb("eats").
understood.

>>> parse.S: sentence'.S.
--> parse(MuS,A) :- sentence(A,MuS).
understood.

>>> parse."the bat eats a cat"?
--> what(A) :- parse("the bat eats a cat",A).
that: s(np("the", "bat"), vp("eats", np("a", "cat"))).

>>> thanks.
YOU'RE WELCOME!
