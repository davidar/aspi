>>> #include "test/shrdlu-world.lp".
>>> #include "test/shrdlu-actions.ldcs".
>>> 
>>> % PICK UP A BIG RED BLOCK.
>>> pickup(big red block)!
--> goal(pickup(A)) :- big(A), red(A), block(A).
cost: 3.
pickup(green cube ~supports[red pyramid])!
put_on(green cube holding, blue block)!
pickup(large red block)!

>>> 
>>> % GRASP THE PYRAMID.
>>> holding(that pyramid)!
--> goal(holding(A)) :- that(A), pyramid(A).
cost: 0.

>>> 
>>> % FIND A BLOCK WHICH IS TALLER THAN THE ONE YOU ARE HOLDING AND PUT IT INTO THE BOX.
>>> block tall.holding?
--> what(B) :- block(B), tall(B,A), holding(A).
that: blue block.

>>> in(that, box)!
--> goal(in(A,B)) :- that(A), box(B).
cost: 5.
put_on(large red block, table)!
pickup(green cube ~supports[red pyramid])!
put_on(green cube holding, box)!
pickup(blue block)!
put_on(blue block, green cube ~supports[red pyramid])!

>>> 
>>> in(blue pyramid, box)!
--> goal(in(A,B)) :- blue(A), pyramid(A), box(B).
cost: 0.
in(blue pyramid, box).

>>> 
>>> % WHAT DOES THE BOX CONTAIN?
>>> contains'.box?
--> what(B) :- contains(A,B), box(A).
that: blue block | blue pyramid | green cube supports[blue block].

>>> 
>>> % WHAT IS THE PYRAMID SUPPORTED BY?
>>> supports[that pyramid]?
--> what(B) :- supports(B,A), that(A), pyramid(A).
that: box.

>>> 
>>> % HOW MANY BLOCKS ARE NOT IN THE BOX?
>>> block ~in.box?
--> what(C) :- block(C), not negation((2),C).
    negation((2),B) :- in(B,A), box(A), block(B).
that: large red block | green cube supports[red pyramid] | red cube.

>>> 
>>> % IS AT LEAST ONE OF THEM NARROWER THAN THE ONE WHICH I TOLD YOU TO PICK UP?
>>> that narrow.command$pickup?
--> what(B) :- that(B), narrow(B,A), command(pickup(A)).
that: red cube.

>>> 
>>> % IS IT SUPPORTED?
>>> supports.that?
--> what(B) :- supports(B,A), that(A).
that: table.

>>> 
>>> % CAN THE TABLE PICK UP BLOCKS?
>>> #any table action$pickup.block?
--> yes :- table(B), action(pickup(B,A)), block(A).
    no :- not yes.
no.

>>> 
>>> % CAN A PYRAMID BE SUPPORTED BY A BLOCK?
>>> #any pyramid action$put_on.block?
--> yes :- pyramid(B), action(put_on(B,A)), block(A).
    no :- not yes.
yes.

>>> 
>>> % CAN A PYRAMID SUPPORT A PYRAMID?
>>> #any pyramid action$put_on.pyramid?
--> yes :- pyramid(B), action(put_on(B,A)), pyramid(A).
    no :- not yes.
no.

>>> 
>>> % STACK UP TWO PYRAMIDS.
>>> stack(pyramid, pyramid)!
--> goal(stack(A,B)) :- pyramid(A), pyramid(B).
impossible.

>>> 
>>> % THE BLUE PYRAMID IS MINE.
>>> mine(blue pyramid).
--> mine(A) :- blue(A), pyramid(A).
understood.

>>> 
>>> % I OWN BLOCKS WHICH ARE NOT RED BUT I DON'T OWN ANYTHING WHICH SUPPORTS A PYRAMID.
>>> mine(block ~red ~supports.pyramid).
--> mine(D) :- block(D), not negation((3),D), not negation((4),D).
    negation((3),A) :- red(A), block(A).
    negation((4),C) :- supports(C,B), pyramid(B), block(C).
understood.

>>> 
>>> % DO I OWN THE BOX?
>>> #any box mine?
--> yes :- box(A), mine(A).
    no :- not yes.
no.

>>> 
>>> % DO I OWN ANYTHING IN THE BOX?
>>> in.box mine?
--> what(B) :- in(B,A), box(A), mine(B).
that: blue block | blue pyramid | green cube supports[blue block].

>>> 
>>> % WILL YOU PLEASE STACK UP BOTH OF THE RED BLOCKS AND EITHER A GREEN CUBE OR A PYRAMID?
>>> #any stack(red block, red block, green cube | pyramid)!
--> { goal(stack(A,B,E)) : red(A), block(A), red(B), block(B), disjunction((2),E) } = 1.
    disjunction((2),C) :- green(C), cube(C).
    disjunction((2),D) :- pyramid(D).
cost: 6.
pickup(green pyramid)!
put_on(green pyramid, large red block)!
pickup(red cube)!
put_on(red cube, large red block)!
pickup(green pyramid)!
put_on(green pyramid, red cube)!

>>> 
>>> % WHICH CUBE IS SITTING ON THE TABLE?
>>> cube on.table?
--> what(B) :- cube(B), on(B,A), table(A).
that: green cube supports[red pyramid].

>>> 
>>> % IS THERE A LARGE BLOCK BEHIND A PYRAMID?
>>> large block behind.pyramid?
--> what(B) :- large(B), block(B), behind(B,A), pyramid(A).
that: blue block | green cube supports[blue block].

>>> 
>>> #any on(red pyramid, green cube)!
--> { goal(on(A,B)) : red(A), pyramid(A), green(B), cube(B) } = 1.
cost: 0.
on(red pyramid, green cube supports[red pyramid]).

>>> 
>>> % PUT A SMALL ONE ONTO THE GREEN CUBE WHICH SUPPORTS A PYRAMID.
>>> #any on(small block, green cube supports.pyramid)!
--> { goal(on(A,C)) : small(A), block(A), green(C), cube(C), supports(C,B), pyramid(B) } = 1.
cost: 4.
pickup(green pyramid)!
put_on(green pyramid, green cube supports[blue block])!
pickup(red cube)!
put_on(red cube, green cube supports[red pyramid])!

>>> 
>>> % PUT THE LITTLEST PYRAMID ON TOP OF IT.
>>> on(little'est.{pyramid}, small block)!
--> goal(on(D,E)) :- little(D,A) : A = @memberof(C), D != A; D = @memberof(C), setof((1),C), small(E), block(E).
    gather((1),B) :- pyramid(B).
cost: 2.
pickup(green pyramid)!
put_on(green pyramid, red cube)!

>>> 
>>> % DOES THE SHORTEST THING THE TALLEST PYRAMID'S SUPPORT SUPPORTS SUPPORT ANYTHING GREEN?
>>> green on.short'est.{on.supports.tall'est.{pyramid}}?
--> what(J) :- green(J), on(J,I), short(I,A) : A = @memberof(H), I != A; I = @memberof(H), setof((3),H).
    gather((2),C) :- pyramid(C).
    gather((3),G) :- on(G,F), supports(F,E), tall(E,B) : B = @memberof(D), E != B; E = @memberof(D), setof((2),D).
that: green pyramid.

>>> 
>>> % WHAT COLOR IS IT?
>>> colour.supports.that?
--> what(C) :- colour(C,B), supports(B,A), that(A).
that: red.

>>> 
>>> % HOW MANY THINGS ARE ON TOP OF GREEN CUBES?
>>> above[green cube]?
--> what(B) :- above(B,A), green(A), cube(A).
that: blue block | green pyramid | red cube | red pyramid.

>>> 
>>> pickup.X: apply(pickup(X),T): apply(pickup(X),T).
--> pickup(apply(pickup(MuX),MuT),MuX) :- apply(pickup(MuX),MuT).
understood.

>>> 
>>> % HAD YOU TOUCHED ANY PYRAMID BEFORE YOU PUT THE GREEN ONE ON THE LITTLE CUBE?
>>> pickup.pyramid before.goal.on(green pyramid, little cube)?
--> what(G) :- pickup(G,A), pyramid(A), end_time(H,G), H = 0 .. (I - 1), start_time(I,D), goal(D,on(B,C)), green(B), pyramid(B), little(C), cube(C).
that: apply(pickup(green pyramid),9) | apply(pickup(green pyramid),13) | apply(pickup(green pyramid),15).

>>> 
>>> that pickup.green?
--> what(B) :- that(B), pickup(B,A), green(A).
that: apply(pickup(green pyramid),9) | apply(pickup(green pyramid),13) | apply(pickup(green pyramid),15).

>>> 
>>> % WHEN DID YOU PICK IT UP?
>>> event during'.that?
--> what(H) :- event(H), start_time(I,A), I = J, I = K .. L, end_time(M,A), M = J .. L, start_time(K,N), N = H, N != A, end_time(L,H), that(A).
that: history(16,goal(stack(red cube,large red block,green pyramid))) | history(20,goal(on(red cube,green cube supports[red pyramid]))).

>>> 
>>> % WHY?
>>> why.that.2?
--> what(B) :- why(B,A), that(A,2).
that: apply(pickup(red cube),11) | apply(pickup(red cube),17) | apply(put_on(green pyramid,large red block),10) | apply(put_on(green pyramid,green cube supports[blue block]),16) | apply(put_on(green pyramid,red cube),14).

>>> 
>>> that pickup.cube?
--> what(B) :- that(B), pickup(B,A), cube(A).
that: apply(pickup(red cube),11) | apply(pickup(red cube),17).

>>> 
>>> % WHY DID YOU DO THAT?
>>> why.that?
--> what(B) :- why(B,A), that(A).
that: apply(put_on(red cube,large red block),12) | apply(put_on(red cube,green cube supports[red pyramid]),18).

>>> why.that?
--> what(B) :- why(B,A), that(A).
that: apply(pickup(green pyramid),13) | history(20,goal(on(red cube,green cube supports[red pyramid]))).

>>> 
>>> % HOW DID YOU DO IT?
>>> event during.that?
--> what(H) :- event(H), start_time(I,H), I = J, I = K .. L, end_time(M,H), M = J .. L, start_time(K,N), N = A, N != H, end_time(L,A), that(A).
that: apply(pickup(green pyramid),15) | apply(pickup(red cube),17) | apply(put_on(green pyramid,green cube supports[blue block]),16) | apply(put_on(red cube,green cube supports[red pyramid]),18).

>>> 
>>> % HOW MANY OBJECTS DID YOU TOUCH WHILE YOU WERE DOING IT?
>>> count{pickup.object during.that.2}?
--> what(Q) :- Q = @countof(P), setof((4),P).
    gather((4),I) :- pickup(I,A), object(A), start_time(J,I), J = K, J = L .. M, end_time(N,I), N = K .. M, start_time(L,O), O = B, O != I, end_time(M,B), that(B,2).
that: 2.

>>> 
>>> % WHAT DID THE RED CUBE SUPPORT BEFORE YOU STARTED TO CLEAN IT OFF?
>>> supports'[red cube, just_before.cleanoff[red cube]]?
--> what(G) :- supports(E,C,G), red(C), cube(C), end_time(F - 1,E), start_time(F,B), cleanoff(B,A), red(A), cube(A).
that: green pyramid.

>>> 
>>> % THERE WERE FIVE BLOCKS TO THE LEFT OF THE BOX THEN.
>>> block left_of[box; just_before.cleanoff[red cube]]?
--> what(G) :- block(G), left_of(D,G,F), end_time(E - 1,D), start_time(E,B), cleanoff(B,A), red(A), cube(A), box(F).
that: red cube.

>>> count{that}?
--> what(C) :- C = @countof(B), setof((5),B).
    gather((5),A) :- that(A).
that: 1.

>>> 
>>> #reset.
>>> #include "test/shrdlu-world.lp".
>>> #include "test/shrdlu-actions.ldcs".
>>> on(blue block, box)!
--> goal(on(A,B)) :- blue(A), block(A), box(B).
cost: 2.
pickup(blue block)!
put_on(blue block, box)!

>>> 
>>> % PUT THE BLUE PYRAMID ON THE BLOCK IN THE BOX.
>>> #any on(blue pyramid, block in.box)!
--> { goal(on(A,C)) : blue(A), pyramid(A), block(C), in(C,B), box(B) } = 1.
cost: 2.
pickup(blue pyramid)!
put_on(blue pyramid, blue block)!

>>> 
>>> % IS THERE ANYTHING WHICH IS BIGGER THAN EVERY PYRAMID BUT IS NOT AS WIDE AS THE THING THAT SUPPORTS IT?
>>> object big'each.{pyramid} X wide'.supports.X?
--> what(E) :- object(E), big(E,A) : A = @memberof(C); setof((1),C), E = MuX, wide(D,E), supports(D,MuX).
    gather((1),B) :- pyramid(B).
that: blue block.

>>> 
>>> % A "STEEPLE" IS A STACK WHICH CONTAINS TWO GREEN CUBES AND A PYRAMID.
>>> steeple$stack(green cube, green cube, pyramid).
--> steeple(stack(A,B,C)) :- green(A), cube(A), green(B), cube(B), pyramid(C).
understood.

>>> 
>>> % ARE THERE ANY STEEPLES NOW?
>>> #any steeple holds.now?
--> yes :- steeple(B), holds(B,A), now(A).
    no :- not yes.
no.

>>> 
>>> % BUILD ONE.
>>> #any steeple!
--> { goal(A) : steeple(A) } = 1.
cost: 6.
pickup(red pyramid)!
put_on(red pyramid, blue block)!
pickup(green cube)!
put_on(green cube holding, green cube on[large red block])!
pickup(green pyramid)!
put_on(green pyramid, green cube)!

>>> 
>>> % CALL THE BIGGEST BLOCK "SUPERBLOCK".
>>> superblock: big'est.{block}.
--> superblock(D) :- big(D,A) : A = @memberof(C), D != A; D = @memberof(C), setof((2),C).
    gather((2),B) :- block(B).
understood.

>>> 
>>> % HAVE YOU PICKED SUPERBLOCK UP SINCE WE BEGAN?
>>> #any holding.superblock?
--> yes :- holding(B,A), superblock(A).
    no :- not yes.
yes.

>>> 
>>> % WHY DID YOU DROP IT?
>>> why.put_on(superblock, table)?
--> what(C) :- why(C,put_on(A,B)), superblock(A), table(B).

>>> 
>>> left_of(red pyramid, box)!
--> goal(left_of(A,B)) :- red(A), pyramid(A), box(B).
cost: 2.
pickup(red pyramid)!
put_on(red pyramid, red cube)!

>>> 
>>> % IS THERE ANYTHING TO THE RIGHT OF THE RED PYRAMID?
>>> right_of[red pyramid]?
--> what(B) :- right_of(B,A), red(A), pyramid(A).
that: blue block | blue pyramid | box.

>>> 
>>> thanks.
YOU'RE WELCOME!
