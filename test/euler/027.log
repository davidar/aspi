>>> % 27. Find a quadratic formula that produces the maximum number of primes for consecutive values of n.
>>> 
>>> composite: N multiple[2..(N-1)] n4.
--> composite(B) :- B = MuN, B \ A = 0, A = 2 .. (MuN-1), B = 1 .. 9999.
understood.

>>> prime: >1 ~composite n4.
--> prime(B) :- B > 1, not negation((2),B), B = 1 .. 9999.
    negation((2),A) :- composite(A), A = 1 .. 9999.
understood.

>>> 
>>> prime_generator(0, p(i2 A, prime i2 B)).
--> prime_generator(0,C) :- A = - 99 .. 99, A = MuA, prime(B), B = - 99 .. 99, B = MuB, C = p(A,B).
understood.

>>> prime_generator(N-1, p(A,B)), prime(((N + A) * N) + B) :: prime_generator(N, p(A,B)).
--> prime_generator(MuN,p(MuA,MuB)) :- prime_generator(MuN-1,p(MuA,MuB)), prime(((MuN+MuA)*MuN)+MuB).
understood.

>>> prime_generator_max.p(A,B): max{prime_generator.p(A,B)}: prime_generator(0, p(A,B)).
--> prime_generator_max(C,p(MuA,MuB)) :- C = @maxof(B), setof((1,MuA,MuB),B), prime_generator(0,p(MuA,MuB)).
    gather((1,MuA,MuB),A) :- prime_generator(A,p(MuA,MuB)), prime_generator(0,p(MuA,MuB)).
understood.

>>> 
>>> prime_generator_max.p(1,41)?
--> what(A) :- prime_generator_max(A,p(1,41)).
that: 39.

>>> prime_generator_max'.max{prime_generator_max.p(i2,i2)}?
--> what(G) :- prime_generator_max(F,G), F = @maxof(E), setof((2),E).
    gather((2),D) :- prime_generator_max(D,C), A = - 99 .. 99, B = - 99 .. 99, C = p(A,B).
that: p(-15,97).

>>> prime_generator_max.that?
--> what(B) :- prime_generator_max(B,A), that(A).
that: 47.

>>> thanks.
YOU'RE WELCOME!
