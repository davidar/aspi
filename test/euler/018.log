>>> % 18. Find the maximum sum travelling from the top of the triangle to the base.
>>> 
>>> node[R,C]: csv[R,C].
--> node(A,MuR,MuC) :- csv(A,MuR,MuC).
understood.

>>> end: csv_rows.
--> end(A) :- csv_rows(A).
understood.

>>> 
>>> left (R+1, C,   node[R+1, C])   :: action demands.at(R,C) deletes.at(R,C) adds.at(R+1, C)   rewards.node[R+1, C].
--> action(left(MuR+1,MuC,A)) :- node(A,MuR+1,MuC).
    demands(left(MuR+1,MuC,A),at(MuR,MuC)) :- node(A,MuR+1,MuC).
    deletes(left(MuR+1,MuC,A),at(MuR,MuC)) :- node(A,MuR+1,MuC).
    adds(left(MuR+1,MuC,A),at(MuR+1,MuC)) :- node(A,MuR+1,MuC).
    rewards(left(MuR+1,MuC,A),B) :- node(B,MuR+1,MuC), node(A,MuR+1,MuC).
understood.

>>> right(R+1, C+1, node[R+1, C+1]) :: action demands.at(R,C) deletes.at(R,C) adds.at(R+1, C+1) rewards.node[R+1, C+1].
--> action(right(MuR+1,MuC+1,A)) :- node(A,MuR+1,MuC+1).
    demands(right(MuR+1,MuC+1,A),at(MuR,MuC)) :- node(A,MuR+1,MuC+1).
    deletes(right(MuR+1,MuC+1,A),at(MuR,MuC)) :- node(A,MuR+1,MuC+1).
    adds(right(MuR+1,MuC+1,A),at(MuR+1,MuC+1)) :- node(A,MuR+1,MuC+1).
    rewards(right(MuR+1,MuC+1,A),B) :- node(B,MuR+1,MuC+1), node(A,MuR+1,MuC+1).
understood.

>>> 
>>> init: at(0,1).
--> init(at(0,1)).
understood.

>>> #any at(end, 1..end)!
--> { goal(at(A,C)) : end(A), C = 1 .. B, end(B) } = 1.
reward: 390.
left(1, 1, 75)!
right(2, 2, 64)!
right(3, 3, 82)!
left(4, 3, 87)!
left(5, 3, 82)!

>>> thanks.
YOU'RE WELCOME!
