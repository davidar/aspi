>>> % 17. How many letters would be needed to write all the numbers in words from 1 to 1000?
>>> #mode say(in,out).
>>> #mode say(out,in).
>>> #pragma memo(say/2).
>>> say.0: "".
--> say(0,"").
understood.

>>> say.1: "one".
--> say(1,"one").
understood.

>>> say.2: "two".
--> say(2,"two").
understood.

>>> say.3: "three".
--> say(3,"three").
understood.

>>> say.4: "four".
--> say(4,"four").
understood.

>>> say.5: "five".
--> say(5,"five").
understood.

>>> say.6: "six".
--> say(6,"six").
understood.

>>> say.7: "seven".
--> say(7,"seven").
understood.

>>> say.8: "eight".
--> say(8,"eight").
understood.

>>> say.9: "nine".
--> say(9,"nine").
understood.

>>> say.10: "ten".
--> say(10,"ten").
understood.

>>> say.11: "eleven".
--> say(11,"eleven").
understood.

>>> say.12: "twelve".
--> say(12,"twelve").
understood.

>>> say.13: "thirteen".
--> say(13,"thirteen").
understood.

>>> say.14: "fourteen".
--> say(14,"fourteen").
understood.

>>> say.15: "fifteen".
--> say(15,"fifteen").
understood.

>>> say.16: "sixteen".
--> say(16,"sixteen").
understood.

>>> say.17: "seventeen".
--> say(17,"seventeen").
understood.

>>> say.18: "eighteen".
--> say(18,"eighteen").
understood.

>>> say.19: "nineteen".
--> say(19,"nineteen").
understood.

>>> say.20: "twenty".
--> say(20,"twenty").
understood.

>>> say.30: "thirty".
--> say(30,"thirty").
understood.

>>> say.40: "forty".
--> say(40,"forty").
understood.

>>> say.50: "fifty".
--> say(50,"fifty").
understood.

>>> say.60: "sixty".
--> say(60,"sixty").
understood.

>>> say.70: "seventy".
--> say(70,"seventy").
understood.

>>> say.80: "eighty".
--> say(80,"eighty").
understood.

>>> say.90: "ninety".
--> say(90,"ninety").
understood.

>>> say[N ~multiple.10 20..99]: (say[(N/10)*10] ++ " ") ++ say[mod(N,10)].
--> say(C,(D ++ (" ")) ++ E) :- C = MuN, C = A, (mod(A,10)) \= 0, C = B, nondet_int_in_range(20,99,B), say((MuN/10)*10,D), say(mod(MuN,10),E).
understood.

>>> say[N multiple.100 100..900]: say[N/100] ++ " hundred".
--> say(B,C ++ (" hundred")) :- B = MuN, (mod(B,100)) = 0, B = A, nondet_int_in_range(100,900,A), say(MuN/100,C).
understood.

>>> say[N ~multiple.100 101..999]: (say[(N/100)*100] ++ " and ") ++ say[mod(N,100)].
--> say(C,(D ++ (" and ")) ++ E) :- C = MuN, C = A, (mod(A,100)) \= 0, C = B, nondet_int_in_range(101,999,B), say((MuN/100)*100,D), say(mod(MuN,100),E).
understood.

>>> say[N multiple.1000 1000..9000]: say[N/1000] ++ " thousand".
--> say(B,C ++ (" thousand")) :- B = MuN, (mod(B,1000)) = 0, B = A, nondet_int_in_range(1000,9000,A), say(MuN/1000,C).
understood.

>>> say.123?
--> what(A) :- say(123,A).
that: "one hundred and twenty three".

>>> say'."seven hundred and forty two"?
--> what(A) :- say(A,"seven hundred and forty two").
that: 742.

>>> #macro char.S: substring[S, 1..length.S, 1].
--> char(MuS,C) :- between(MuS,B - 1,(B + 1) - 1,C), nondet_int_in_range(1,A,B), length(MuS,A).
understood.

>>> count{{char.say[1..100] ~" "}}?
--> negation1(" ").
    gather1(E) :- between(B,F - 1,(F + 1) - 1,E), nondet_int_in_range(1,G,F), length(B,G), say(A,B), nondet_int_in_range(1,100,A), not negation1(E).
    what(I) :- count(H,I), sorted_solutions(gather1,H).
that: 864.

>>> thanks.
YOU'RE WELCOME!
