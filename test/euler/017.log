>>> % 17. How many letters would be needed to write all the numbers in words from 1 to 1000?
>>> say.0: "".
--> say("",0).
understood.

>>> say.1: "one".
--> say("one",1).
understood.

>>> say.2: "two".
--> say("two",2).
understood.

>>> say.3: "three".
--> say("three",3).
understood.

>>> say.4: "four".
--> say("four",4).
understood.

>>> say.5: "five".
--> say("five",5).
understood.

>>> say.6: "six".
--> say("six",6).
understood.

>>> say.7: "seven".
--> say("seven",7).
understood.

>>> say.8: "eight".
--> say("eight",8).
understood.

>>> say.9: "nine".
--> say("nine",9).
understood.

>>> say.10: "ten".
--> say("ten",10).
understood.

>>> say.11: "eleven".
--> say("eleven",11).
understood.

>>> say.12: "twelve".
--> say("twelve",12).
understood.

>>> say.13: "thirteen".
--> say("thirteen",13).
understood.

>>> say.14: "fourteen".
--> say("fourteen",14).
understood.

>>> say.15: "fifteen".
--> say("fifteen",15).
understood.

>>> say.16: "sixteen".
--> say("sixteen",16).
understood.

>>> say.17: "seventeen".
--> say("seventeen",17).
understood.

>>> say.18: "eighteen".
--> say("eighteen",18).
understood.

>>> say.19: "nineteen".
--> say("nineteen",19).
understood.

>>> say.20: "twenty".
--> say("twenty",20).
understood.

>>> say.30: "thirty".
--> say("thirty",30).
understood.

>>> say.40: "forty".
--> say("forty",40).
understood.

>>> say.50: "fifty".
--> say("fifty",50).
understood.

>>> say.60: "sixty".
--> say("sixty",60).
understood.

>>> say.70: "seventy".
--> say("seventy",70).
understood.

>>> say.80: "eighty".
--> say("eighty",80).
understood.

>>> say.90: "ninety".
--> say("ninety",90).
understood.

>>> say[N ~multiple.10 20..99]: concatenate[say[(N/10)*10], " ", say[N\10]].
--> say(F,B) :- B = MuN, not negation((1),B), B = 20 .. 99, F = @concatenate(C,G), G = @concatenate(" ",D), say(C,(MuN/10)*10), say(D,MuN\10).
    negation((1),A) :- A \ 10 = 0, A = 20 .. 99.
understood.

>>> say[N multiple.100 100..900]: concatenate[say[N/100], " hundred"].
--> say(C,A) :- A = MuN, A \ 100 = 0, A = 100 .. 900, C = @concatenate(B," hundred"), say(B,MuN/100).
understood.

>>> say[N ~multiple.100 101..999]: concatenate[say[(N/100)*100], " and ", say[N\100]].
--> say(F,B) :- B = MuN, not negation((2),B), B = 101 .. 999, F = @concatenate(C,G), G = @concatenate(" and ",D), say(C,(MuN/100)*100), say(D,MuN\100).
    negation((2),A) :- A \ 100 = 0, A = 101 .. 999.
understood.

>>> say[N multiple.1000 1000..9000]: concatenate[say[N/1000], " thousand"].
--> say(C,A) :- A = MuN, A \ 1000 = 0, A = 1000 .. 9000, C = @concatenate(B," thousand"), say(B,MuN/1000).
understood.

>>> say.123?
--> what(A) :- say(A,123).
that: "one hundred and twenty three".

>>> say'."seven hundred and forty two"?
--> what(A) :- say("seven hundred and forty two",A).
that: 742.

>>> #macro char.S: substring.S length'.1.
--> char(E,MuS) :- E = @substring(MuS,F,G), H = @length(MuS), F = 1 .. H, I = H - F + 1, G = 0 .. I, 1 = @length(E).
understood.

>>> count{{char.say[1..100] ~" "}}?
--> what(N) :- N = @countof(M), bagof((1),M).
    gather((1),(L,P0)) :- proof(P0,aggregation((1),L)).
    negation((3)," ").
    aggregation((1),G) :- G = @substring(B,H,I), J = @length(B), H = 1 .. J, K = J - H + 1, I = 0 .. K, 1 = @length(G), say(B,A), A = 1 .. 100, not negation((3),G).
that: 864.

>>> thanks.
YOU'RE WELCOME!
