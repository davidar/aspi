>>> % 8. Discover the largest product of four consecutive digits in the 10-digit number.
>>> four_digits: substring."0319989000" length'.4.
--> four_digits(G) :- G = @substring("0319989000",H,I), J = @length("0319989000"), H = K, K = 1 .. J, L = ((J - H) + 1), I = M, M = 0 .. L, 4 = @length(G).
understood.

>>> four_digits?
--> what(A) :- four_digits(A).
that: "0319" | "1998" | "3199" | "8900" | "9000" | "9890" | "9989".

>>> #macro char.S: substring.S length'.1.
--> char(G,MuS) :- G = @substring(MuS,H,I), J = @length(MuS), H = K, K = 1 .. J, L = ((J - H) + 1), I = M, M = 0 .. L, 1 = @length(G).
understood.

>>> product{{decimal.char.S}}: four_digits(S)?
--> what(Q) :- Q = @productof(P), bagof((1,MuS),P), four_digits(MuS).
    aggregation((1,MuS),N) :- N = @decimal(G), G = @substring(MuS,H,I), J = @length(MuS), H = K, K = 1 .. J, L = ((J - H) + 1), I = M, M = 0 .. L, 1 = @length(G), four_digits(MuS).
    gather((1,MuS),(O,P0)) :- proof(P0,aggregation((1,MuS),O)), four_digits(MuS).
that: 0 | 243 | 648 | 5832.

>>> max{that}?
--> what(C) :- C = @maxof(B), setof((2),B).
    gather((2),A) :- that(A).
that: 5832.

>>> thanks.
YOU'RE WELCOME!
