% 1. Add all the natural numbers below 1000 that are multiples of 3 or 5.
#sum(0..999 multiple[3|5])?

% 2. Find the sum of all the even-valued terms in the Fibonacci sequence which do not exceed one million.
fib[0]: 0.
fib[1]: 1.
fib[N 2..45]: fib[N-1] + fib[N-2].
fib: fib[0..45].
#set(fib)?
#bag(fib)?
proof.fib(13)?
#sum(even fib (<).1000000)?

% 3. Find the largest prime factor of 42.
composite: N multiple[2..(N-1)] n3.
prime: (>).1 ~composite n3.
prime?
factor[X n3]: prime multiple'[X].
factor.42?
#most((>), factor.42)?

% 4. Find the largest palindrome made from the product of two 2-digit numbers.
show'[S reverse.S] (10..99)*(10..99)?
#most((>), show'[S reverse.S] (10..99)*(10..99))?

% 5. What is the smallest number divisible by each of the numbers 1 to 10?
#most((<), #each(multiple, 1..10) n4)?

% 6. What is the difference between the sum of the squares and the square of the sums?
#sum((1..100) ** 2)?
#sum(1..100) ** 2?

% 7. Find the 101st prime.
#enumerate(101, prime)?

% 8. Discover the largest product of four consecutive digits in the 10-digit number.
four_digits: substring."0319989000" length'.4.
four_digits?
#macro char.S: substring.S length'.1.
product.#bag(decimal.char.S): four_digits(S)?
#max(that)?

% 9. There is only one Pythagorean triplet, {a, b, c}, for which a + b + c = 96. Find the product abc.
pythag(A n2, B n2, C n2): (A**2) = ((B**2) + (C**2)).
pythag[3,4]?
triple(A,B,C): pythag(A,B,C)?
triple(A,B,C): pythag(A,B,C), ((A+B)+C) = 96?
#set(triple(A,B,C): pythag(A,B,C), ((A+B)+C) = 96)?
(A*B)*C: pythag(A,B,C), ((A+B)+C) = 96?

% 10. Calculate the sum of all the primes below one hundred.
#sum(prime (<).100)?

% 12. What is the first triangle number to have over twenty divisors?
triangle: sum.#set(1..N): N = 1..99.
triangle (<).100?
divisor[X n3]: multiple'[X] n3.
divisors[X n3]: count.#set(divisor.X).
triangle N: divisors.N > 20?
#most((<), that)?
divisor.that?

% 14. Find the longest Collatz sequence using a starting number under ten.
collatz[N even n3]: N / 2.
collatz[N odd n3]: (3*N) + 1.
collatz_steps.1: 0.
collatz_steps[N (>).1 n3]: 1 + collatz_steps[collatz.N].
collatz_steps[1..10]?
#max(collatz_steps[1..10])?
#argmax(collatz_steps, 1..10)?

% 16. What is the sum of the digits of the number 2^10?
2**10?
#macro digit.N: decimal.char.show.N.
sum.#bag(digit[2**10])?

% 17. How many letters would be needed to write all the numbers in words from 1 to 1000?
say.0: "".
say.1: "one".
say.2: "two".
say.3: "three".
say.4: "four".
say.5: "five".
say.6: "six".
say.7: "seven".
say.8: "eight".
say.9: "nine".
say.10: "ten".
say.11: "eleven".
say.12: "twelve".
say.13: "thirteen".
say.14: "fourteen".
say.15: "fifteen".
say.16: "sixteen".
say.17: "seventeen".
say.18: "eighteen".
say.19: "nineteen".
say.20: "twenty".
say.30: "thirty".
say.40: "forty".
say.50: "fifty".
say.60: "sixty".
say.70: "seventy".
say.80: "eighty".
say.90: "ninety".
say[N ~multiple.10 20..99]: concatenate[say[(N/10)*10], " ", say[N\10]].
say[N multiple.100 100..900]: concatenate[say[N/100], " hundred"].
say[N ~multiple.100 101..999]: concatenate[say[(N/100)*100], " and ", say[N\100]].
say[N multiple.1000 1000..9000]: concatenate[say[N/1000], " thousand"].
say.123?
say'."seven hundred and forty two"?
count.#bag(char.say[1..100] ~" ")?
#undef say.

% 20. Find the sum of digits in 10!
factorial[N 1..12]: product.#set(1..N).
factorial.10?
sum.#bag(decimal[substring.show.factorial.10 length'.1])?

% 21. Evaluate the sum of all amicable numbers under 1000.
proper_divisor[N n3]: 1..(N-1) multiple'.N.
aliquot[N n3]: sum.#set(proper_divisor.N).
perfect(A): aliquot(A,A).
perfect?
amicable(A,B): aliquot(A,B), aliquot(B,A), A != B.
amicable: amicable.n3.
amicable?
#sum(amicable (<).1000)?

% 23. Find the largest even positive integer which cannot be written as the sum of two abundant numbers.
abundant(N n3): N < aliquot.N.
abundant?
~(abundant + abundant) n3?
#max(that even)?

% 25. What is the first term in the Fibonacci sequence to contain 10 digits?
fib N: count.#bag(digit.N) = 10?

% 29. How many distinct terms are in the sequence generated by a^b for 2 ≤ a ≤ 9 and 2 ≤ b ≤ 9?
(2..9)**(2..9)?
#count(that)?
