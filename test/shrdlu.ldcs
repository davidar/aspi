#include "test/shrdlu-world.lp".
#include "test/shrdlu-actions.lp".

% PICK UP A BIG RED BLOCK.
pickup(big red block)!

% GRASP THE PYRAMID.
holding(that pyramid)!

% FIND A BLOCK WHICH IS TALLER THAN THE ONE YOU ARE HOLDING AND PUT IT INTO THE BOX.
block tall.holding?
in(that, box)!

in(blue pyramid, box)!

% WHAT DOES THE BOX CONTAIN?
contains'.box?

% WHAT IS THE PYRAMID SUPPORTED BY?
supports[that pyramid]?

% HOW MANY BLOCKS ARE NOT IN THE BOX?
block ~in.box?

% IS AT LEAST ONE OF THEM NARROWER THAN THE ONE WHICH I TOLD YOU TO PICK UP?
that narrow.command$pickup?

% IS IT SUPPORTED?
supports.that?

% CAN THE TABLE PICK UP BLOCKS?
#any table action$pickup.block?

% CAN A PYRAMID BE SUPPORTED BY A BLOCK?
#any pyramid action$put_on.block?

% CAN A PYRAMID SUPPORT A PYRAMID?
#any pyramid action$put_on.pyramid?

% STACK UP TWO PYRAMIDS.
stack(pyramid, pyramid)!

% THE BLUE PYRAMID IS MINE.
mine(blue pyramid).

% I OWN BLOCKS WHICH ARE NOT RED BUT I DON'T OWN ANYTHING WHICH SUPPORTS A PYRAMID.
mine(block ~red ~supports.pyramid).

% DO I OWN THE BOX?
#any box mine?

% DO I OWN ANYTHING IN THE BOX?
in.box mine?

% WILL YOU PLEASE STACK UP BOTH OF THE RED BLOCKS AND EITHER A GREEN CUBE OR A PYRAMID?
#any stack(red block, red block, green cube | pyramid)!

% WHICH CUBE IS SITTING ON THE TABLE?
cube on.table?

% IS THERE A LARGE BLOCK BEHIND A PYRAMID?
large block behind.pyramid?

#any on(red pyramid, green cube)!

% PUT A SMALL ONE ONTO THE GREEN CUBE WHICH SUPPORTS A PYRAMID.
#any on(small block, green cube supports.pyramid)!

% PUT THE LITTLEST PYRAMID ON TOP OF IT.
on(little'est.{pyramid}, small block)!

% DOES THE SHORTEST THING THE TALLEST PYRAMID'S SUPPORT SUPPORTS SUPPORT ANYTHING GREEN?
green on.short'est.{on.supports.tall'est.{pyramid}}?

% WHAT COLOR IS IT?
colour.supports.that?

% HOW MANY THINGS ARE ON TOP OF GREEN CUBES?
above[green cube]?

% HAD YOU TOUCHED ANY PYRAMID BEFORE YOU PUT THE GREEN ONE ON THE LITTLE CUBE?
pickup.pyramid before.goal.on(green pyramid, little cube)?

that pickup.green?

% WHEN DID YOU PICK IT UP?
event during'.that?

% WHY?
why.that.2?

that pickup.cube?

% WHY DID YOU DO THAT?
why.that?
why.that?

% HOW DID YOU DO IT?
event during.that?

% HOW MANY OBJECTS DID YOU TOUCH WHILE YOU WERE DOING IT?
count{pickup.object during.that.2}?

% WHAT DID THE RED CUBE SUPPORT BEFORE YOU STARTED TO CLEAN IT OFF?
supports'[red cube, just_before.cleanoff[red cube]]?

% THERE WERE FIVE BLOCKS TO THE LEFT OF THE BOX THEN.
block left_of[box; just_before.cleanoff[red cube]]?
count{that}?

#reset.
#include "test/shrdlu-world.lp".
#include "test/shrdlu-actions.lp".
on(blue block, box)!

% PUT THE BLUE PYRAMID ON THE BLOCK IN THE BOX.
#any on(blue pyramid, block in.box)!

% IS THERE ANYTHING WHICH IS BIGGER THAN EVERY PYRAMID BUT IS NOT AS WIDE AS THE THING THAT SUPPORTS IT?
object big'each.{pyramid} X wide'.supports.X?

% A "STEEPLE" IS A STACK WHICH CONTAINS TWO GREEN CUBES AND A PYRAMID.
steeple$stack(green cube, green cube, pyramid).

% ARE THERE ANY STEEPLES NOW?
#any steeple holds.now?

% BUILD ONE.
#any steeple!

% CALL THE BIGGEST BLOCK "SUPERBLOCK".
superblock: big'est.{block}.

% HAVE YOU PICKED SUPERBLOCK UP SINCE WE BEGAN?
#any holding.superblock?

% WHY DID YOU DROP IT?
why.put_on(superblock, table)?

left_of(red pyramid, box)!

% IS THERE ANYTHING TO THE RIGHT OF THE RED PYRAMID?
right_of[red pyramid]?

thanks.
