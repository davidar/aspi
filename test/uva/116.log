>>> % 116 - Unidirectional TSP
>>> 
>>> rows: csv_rows.
--> rows(A) :- csv_rows(A).
understood.

>>> cols: csv_cols.1.
--> cols(A) :- csv_cols(A,1).
understood.

>>> cell[R,C]: csv[R,C].
--> cell(A,MuR,MuC) :- csv(A,MuR,MuC).
understood.

>>> 
>>> adjacent.1: rows | 2.
--> adjacent(B,1) :- disjunction((1),B).
    disjunction((1),A) :- rows(A).
    disjunction((1),2).
understood.

>>> adjacent[R 2..(rows-1)]: R-1 | R+1.
--> adjacent(C,B) :- B = MuR, B = 2 .. (A-1), rows(A), disjunction((2,MuR),C).
    disjunction((2,MuR),MuR-1) :- B = MuR, B = 2 .. (A-1), rows(A).
    disjunction((2,MuR),MuR+1) :- B = MuR, B = 2 .. (A-1), rows(A).
understood.

>>> adjacent.rows: rows-1 | 1.
--> adjacent(C,A) :- rows(A), disjunction((3),C).
    disjunction((3),B-1) :- rows(B).
    disjunction((3),1).
understood.

>>> 
>>> init: start().
--> init(start).
understood.

>>> holds(at(R,C), T) -: holds(allowed(R | adjacent.R, C+1), T).
--> holds(allowed(B,MuC+1),MuT) :- disjunction((4,MuR),B), holds(at(MuR,MuC),MuT).
    disjunction((4,MuR),MuR) :- holds(at(MuR,MuC),MuT).
    disjunction((4,MuR),A) :- adjacent(A,MuR), holds(at(MuR,MuC),MuT).
understood.

>>> begin(R,1, V cell[R,1]) :: action demands.start() deletes.start() adds_temporary.at(R,1) costs.V.
--> action(begin(MuR,1,A)) :- A = MuV, cell(A,MuR,1).
    demands(begin(MuR,1,A),start) :- A = MuV, cell(A,MuR,1).
    deletes(begin(MuR,1,A),start) :- A = MuV, cell(A,MuR,1).
    adds_temporary(begin(MuR,1,A),at(MuR,1)) :- A = MuV, cell(A,MuR,1).
    costs(begin(MuR,1,A),MuV) :- A = MuV, cell(A,MuR,1).
understood.

>>> go(R,C, V cell[R,C]) :: action demands_not.start() demands.allowed(R,C) adds_temporary.at(R,C) costs.V.
--> action(go(MuR,MuC,A)) :- A = MuV, cell(A,MuR,MuC).
    demands_not(go(MuR,MuC,A),start) :- A = MuV, cell(A,MuR,MuC).
    demands(go(MuR,MuC,A),allowed(MuR,MuC)) :- A = MuV, cell(A,MuR,MuC).
    adds_temporary(go(MuR,MuC,A),at(MuR,MuC)) :- A = MuV, cell(A,MuR,MuC).
    costs(go(MuR,MuC,A),MuV) :- A = MuV, cell(A,MuR,MuC).
understood.

>>> #any at(1..rows, cols)!
--> { goal(at(B,C)) : B = 1 .. A, rows(A), cols(C) } = 1.
cost: 11.
begin(1, 1, 3)!
go(2, 2, 1)!
go(1, 3, 1)!
go(5, 4, 1)!
go(5, 5, 2)!
go(5, 6, 3)!

>>> thanks.
YOU'RE WELCOME!
