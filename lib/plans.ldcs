state.0: init.
nop() :: action costs.0.
tmax: now + 20.
#macro time: 1..tmax.

state.T: adds=apply.T.
del.T: deletes=apply.T.
state[time T]: state[T-1] ~del[T].
holds.T: state.T.

holds.T: adds_temporary=apply.T.

holds: holds.now.
history(F) :- history(C,F).
command(G) :- history(goal(G)).

plan_times[T1..T2]: plan_interval[T1, T2].

goal(history(C,goal(F)), F) :- history(C,goal(F)).

event(history(C,G)) :- history(C,G).
event(apply(A,T)) :- apply(A,T).
event(holds(P,T), P) :- holds(P,T).

start_time(T1, history(C,G)) :- history(C,G), plan_interval(C, T1, T2).
  end_time(T2, history(C,G)) :- history(C,G), plan_interval(C, T1, T2).
start_time(T, apply(A,T)) :- apply(A,T).
  end_time(T, apply(A,T)) :- apply(A,T).
start_time(T, holds(P,T)) :- holds(P,T).
  end_time(T, holds(P,T)) :- holds(P,T).

because(apply(X,S), apply(A,T)) :- adds(X,F),    plan_interval(C, T1, T2), T1 <= S, S <= T2, demands(A,F),  apply(A,T), S < T, T <= T2, S = 1..now.
because(apply(X,S), apply(A,T)) :- deletes(X,F), plan_interval(C, T1, T2), T1 <= S, S <= T2, demands_not(A,F), apply(A,T), S < T, T <= T2, S = 1..now, holds(F, S-1).
because(apply(A,T), history(C, goal(G))) :- plan_interval(C,S,T), history(C, goal(G)), action(A).
because(A,R) :- apply(A,T), because(apply(A,T), R).
why(R,E) :- because(E,R).
