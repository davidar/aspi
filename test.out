>>> % PICK UP A BIG RED BLOCK.
>>> holding(big red block)!
--> { goal(B) : big(A), red(A), block(A), B = holding(A) } = 1.
pickup(green_cube_1)
put_on(green_cube_1,box)
pickup(big_red)
ok.

>>> 
>>> % GRASP THE PYRAMID.
>>> holding(that pyramid)!
--> { goal(B) : that(A), pyramid(A), B = holding(A) } = 1.
impossible.

>>> 
>>> % FIND A BLOCK WHICH IS TALLER THAN THE ONE YOU ARE HOLDING AND PUT IT INTO THE BOX.
>>> block tall.holding?
--> show(B) :- block(B), tall(B,A), holding(A).
blue_block.

>>> in(that, box)!
--> { goal(C) : that(A), box(B), C = in(A,B) } = 1.
put_on(big_red,table_front_right)
pickup(blue_block)
put_on(blue_block,green_cube_1)
ok.

>>> 
>>> in(blue pyramid, box)!
--> { goal(C) : blue(A), pyramid(A), box(B), C = in(A,B) } = 1.
already(in(blue_pyramid,box)).

>>> 
>>> % WHAT DOES THE BOX CONTAIN?
>>> contains'.box?
--> show(B) :- contains(A,B), box(A).
blue_block.
green_cube_1.
blue_pyramid.

>>> 
>>> % WHAT IS THE PYRAMID SUPPORTED BY?
>>> supports[that pyramid]?
--> show(B) :- supports(B,A), that(A), pyramid(A).
box.

>>> 
>>> % HOW MANY BLOCKS ARE NOT IN THE BOX?
>>> block ~in.box?
--> show(C) :- block(C), not lifted1(C).
    lifted1(B) :- in(B,A), box(A).
big_red.
red_cube.
green_cube_2.

>>> 
>>> % IS AT LEAST ONE OF THEM NARROWER THAN THE ONE WHICH I TOLD YOU TO PICK UP?
>>> that narrow.history$goal$holding?
--> show(B) :- that(B), narrow(B,A), history(goal(holding(A))).
red_cube.

>>> 
>>> % IS IT SUPPORTED?
>>> supports.that?
--> show(B) :- supports(B,A), that(A).
table_front_left.

>>> 
>>> % CAN THE TABLE PICK UP BLOCKS?
>>> #any(table action$pickup.block)?
--> show(C) :- any1(C).
    any1(true) :- table(B), action(pickup(B,A)), block(A).
    any1(false) :- not any1(true).
false.

>>> 
>>> % CAN A PYRAMID BE SUPPORTED BY A BLOCK?
>>> #any(pyramid action$put_on.block)?
--> show(C) :- any1(C).
    any1(true) :- pyramid(B), action(put_on(B,A)), block(A).
    any1(false) :- not any1(true).
true.

>>> 
>>> % CAN A PYRAMID SUPPORT A PYRAMID?
>>> #any(pyramid action$put_on.pyramid)?
--> show(C) :- any1(C).
    any1(true) :- pyramid(B), action(put_on(B,A)), pyramid(A).
    any1(false) :- not any1(true).
false.

>>> 
>>> % STACK UP TWO PYRAMIDS.
>>> stack(pyramid, pyramid)!
--> { goal(C) : pyramid(A), pyramid(B), C = stack(A,B) } = 1.
impossible.

>>> 
>>> % THE BLUE PYRAMID IS MINE.
>>> mine(blue pyramid).
--> mine(A) :- blue(A), pyramid(A).
understood.

>>> 
>>> % I OWN BLOCKS WHICH ARE NOT RED BUT I DON'T OWN ANYTHING WHICH SUPPORTS A PYRAMID.
>>> mine(block ~red ~supports.pyramid).
--> mine(C) :- block(C), not red(C), not lifted1(C).
    lifted1(B) :- supports(B,A), pyramid(A).
understood.

>>> 
>>> % DO I OWN THE BOX?
>>> #any(box mine)?
--> show(B) :- any1(B).
    any1(true) :- box(A), mine(A).
    any1(false) :- not any1(true).
false.

>>> 
>>> % DO I OWN ANYTHING IN THE BOX?
>>> in.box mine?
--> show(B) :- in(B,A), box(A), mine(B).
blue_block.
green_cube_1.
blue_pyramid.

>>> 
>>> % WILL YOU PLEASE STACK UP BOTH OF THE RED BLOCKS AND EITHER A GREEN CUBE OR A PYRAMID?
>>> stack(red block, red block, green cube | pyramid)!
--> { goal(E) : red(A), block(A), red(B), block(B), disjunction1(D), E = stack(A,B,D) } = 1.
    disjunction1(C) :- green(C), cube(C).
    disjunction1(C) :- pyramid(C).
pickup(green_pyramid)
put_on(green_pyramid,big_red)
pickup(red_cube)
put_on(red_cube,big_red)
pickup(red_pyramid)
put_on(red_pyramid,red_cube)
ok.

>>> 
>>> % WHICH CUBE IS SITTING ON THE TABLE?
>>> cube on.table?
--> show(B) :- cube(B), on(B,A), table(A).
green_cube_2.

>>> 
>>> % IS THERE A LARGE BLOCK BEHIND A PYRAMID?
>>> large block behind.pyramid?
--> show(B) :- large(B), block(B), behind(B,A), pyramid(A).
blue_block.
green_cube_1.

>>> 
>>> on(red pyramid, green cube)!
--> { goal(C) : red(A), pyramid(A), green(B), cube(B), C = on(A,B) } = 1.
pickup(red_pyramid)
put_on(red_pyramid,green_cube_1)
ok.

>>> 
>>> % PUT A SMALL ONE ONTO THE GREEN CUBE WHICH SUPPORTS A PYRAMID.
>>> on(small block, green cube supports.pyramid)!
--> { goal(D) : small(A), block(A), green(C), cube(C), supports(C,B), pyramid(B), D = on(A,C) } = 1.
pickup(blue_block)
put_on(blue_block,green_cube_2)
pickup(red_cube)
put_on(red_cube,green_cube_1)
ok.

>>> 
>>> % PUT THE LITTLEST PYRAMID ON TOP OF IT.
>>> on(#most(little, pyramid), that)!
--> { goal(E) : goal1(E) } = 1.
    goal1(D) :- little(B,A) : pyramid(A), B != A; pyramid(B), that(C), D = on(B,C).
pickup(green_pyramid)
put_on(green_pyramid,red_cube)
ok.

>>> 
>>> % DOES THE SHORTEST THING THE TALLEST PYRAMID'S SUPPORT SUPPORTS SUPPORT ANYTHING GREEN?
>>> green on.#most(short, on.supports.#most(tall, pyramid))?
--> show(G) :- green(G), on(G,F), short(F,D) : superlative1(D), F != D; superlative1(F).
    superlative1(E) :- on(E,C), supports(C,B), tall(B,A) : pyramid(A), B != A; pyramid(B).
green_pyramid.

>>> 
>>> % WHAT COLOR IS IT?
>>> colour.supports.that?
--> show(C) :- colour(C,B), supports(B,A), that(A).
red.

>>> 
>>> % HOW MANY THINGS ARE ON TOP OF GREEN CUBES?
>>> above[green cube]?
--> show(B) :- above(B,A), green(A), cube(A).
blue_block.
red_cube.
red_pyramid.
green_pyramid.

>>> 
>>> % HAD YOU TOUCHED ANY PYRAMID BEFORE YOU PUT THE GREEN ONE ON THE LITTLE CUBE?
>>> pickup.pyramid before.goal.on(green pyramid, little cube)?
--> show(F) :- green(B), pyramid(B), little(C), cube(C), pickup(F,A), pyramid(A), end_time(G,F), G = 0 .. H - 1, start_time(H,E), goal(E,D), D = on(B,C).
apply(pickup(green_pyramid),7).
apply(pickup(red_pyramid),11).
apply(pickup(red_pyramid),13).

>>> 
>>> that pickup.green?
--> show(B) :- that(B), pickup(B,A), green(A).
apply(pickup(green_pyramid),7).

>>> 
>>> % WHEN DID YOU PICK IT UP?
>>> event during'.that?
--> show(B) :- event(B), start_time(C,A), end_time(D,A), start_time(E,B), end_time(F,B), C = E .. F, D = C .. F, A != B, that(A).
history(15,goal(stack(red_cube,big_red,red_pyramid))).

>>> 
>>> % WHY?
>>> why.that.2?
--> show(C) :- why(C,B), that(B,A), A = 2.
apply(put_on(green_pyramid,big_red),8).
apply(pickup(red_cube),9).
apply(put_on(red_pyramid,red_cube),12).

>>> 
>>> that pickup.cube?
--> show(B) :- that(B), pickup(B,A), cube(A).
apply(pickup(red_cube),9).

>>> 
>>> % WHY DID YOU DO THAT?
>>> why.that?
--> show(B) :- why(B,A), that(A).
apply(put_on(red_cube,big_red),10).

>>> why.that?
--> show(B) :- why(B,A), that(A).
apply(pickup(red_pyramid),11).

>>> why.that?
--> show(B) :- why(B,A), that(A).
apply(put_on(red_pyramid,red_cube),12).

>>> why.that?
--> show(B) :- why(B,A), that(A).
goal(stack(red_cube,big_red,red_pyramid)).

>>> why.that?
--> show(B) :- why(B,A), that(A).
history(15,goal(stack(red_cube,big_red,red_pyramid))).

>>> 
>>> % HOW DID YOU DO IT?
>>> event during.that?
--> show(B) :- event(B), start_time(C,B), end_time(D,B), start_time(E,A), end_time(F,A), C = E .. F, D = C .. F, B != A, that(A).
apply(pickup(green_pyramid),7).
apply(put_on(green_pyramid,big_red),8).
apply(pickup(red_cube),9).
apply(put_on(red_cube,big_red),10).
apply(pickup(red_pyramid),11).
apply(put_on(red_pyramid,red_cube),12).

>>> 
>>> % HOW MANY OBJECTS DID YOU TOUCH WHILE YOU WERE DOING IT?
>>> #count(pickup.object during.that.2)?
--> show(I) :- I = #count { D : pickup(D,A), object(A), start_time(J,D), end_time(K,D), start_time(L,C), end_time(M,C), J = L .. M, K = J .. M, D != C, that(C,B), B = 2 }.
3.

>>> 
>>> % WHAT DID THE RED CUBE SUPPORT BEFORE YOU STARTED TO CLEAN IT OFF?
>>> supports'[red cube, just_before.cleanoff[red cube]]?
--> show(E) :- supports(D,C,E), red(C), cube(C), end_time(F - 1,D), start_time(F,B), cleanoff(B,A), red(A), cube(A).
red_pyramid.
green_pyramid.

>>> 
>>> % THERE WERE FIVE BLOCKS TO THE LEFT OF THE BOX THEN.
>>> block left_of[box; just_before.cleanoff[red cube]]?
--> show(E) :- block(E), left_of(C,E,D), end_time(F - 1,C), start_time(F,B), cleanoff(B,A), red(A), cube(A), box(D).
red_cube.

>>> #count(that)?
--> show(B) :- B = #count { A : that(A) }.
1.

>>> 
>>> on(blue block, box)!
--> { goal(C) : blue(A), block(A), box(B), C = on(A,B) } = 1.
pickup(blue_pyramid)
put_on(blue_pyramid,table_back_left)
pickup(blue_block)
put_on(blue_block,box)
ok.

>>> 
>>> % PUT THE BLUE PYRAMID ON THE BLOCK IN THE BOX.
>>> on(blue pyramid, block in.box)!
--> { goal(D) : blue(A), pyramid(A), block(C), in(C,B), box(B), D = on(A,C) } = 1.
pickup(blue_pyramid)
put_on(blue_pyramid,blue_block)
ok.

>>> 
>>> % IS THERE ANYTHING WHICH IS BIGGER THAN EVERY PYRAMID BUT IS NOT AS WIDE AS THE THING THAT SUPPORTS IT?
>>> object #each(big, pyramid) X wide'.supports.X?
--> show(D) :- object(D), big(D,A) : pyramid(A); D = MuX, wide(C,D), supports(C,B), B = MuX.
blue_block.

>>> 
>>> % A "STEEPLE" IS A STACK WHICH CONTAINS TWO GREEN CUBES AND A PYRAMID.
>>> steeple$stack(green cube, green cube, pyramid).
--> steeple(stack(A,B,C)) :- green(A), cube(A), green(B), cube(B), pyramid(C).
understood.

>>> 
>>> % ARE THERE ANY STEEPLES NOW?
>>> #any(steeple holds.now)?
--> show(C) :- any1(C).
    any1(true) :- steeple(B), holds(B,A), now(A).
    any1(false) :- not any1(true).
false.

>>> 
>>> % BUILD ONE.
>>> steeple!
--> { goal(A) : steeple(A) } = 1.
pickup(green_pyramid)
put_on(green_pyramid,big_red)
pickup(red_cube)
put_on(red_cube,table_front_left)
pickup(red_pyramid)
put_on(red_pyramid,red_cube)
pickup(green_cube_2)
put_on(green_cube_2,green_cube_1)
pickup(green_pyramid)
put_on(green_pyramid,green_cube_2)
ok.

>>> 
>>> % CALL THE BIGGEST BLOCK "SUPERBLOCK".
>>> superblock(#most(big, block)).
--> superblock(B) :- big(B,A) : block(A), B != A; block(B).
understood.

>>> 
>>> % HAVE YOU PICKED SUPERBLOCK UP SINCE WE BEGAN?
>>> #any(holding.superblock)?
--> show(C) :- any1(C).
    any1(true) :- holding(B,A), superblock(A).
    any1(false) :- not any1(true).
true.

>>> 
>>> % WHY DID YOU DROP IT?
>>> why.put_on(superblock, table)?
--> show(D) :- superblock(A), table(B), why(D,C), C = put_on(A,B).
nonexistent.

>>> 
>>> left_of(red pyramid, box)!
--> { goal(C) : red(A), pyramid(A), box(B), C = left_of(A,B) } = 1.
already(left_of(red_pyramid,box)).

>>> 
>>> % IS THERE ANYTHING TO THE RIGHT OF THE RED PYRAMID?
>>> right_of[red pyramid]?
--> show(B) :- right_of(B,A), red(A), pyramid(A).
box.
big_red.
blue_block.
green_cube_1.
green_cube_2.
green_pyramid.
blue_pyramid.

>>> 
>>> thanks.
YOU'RE WELCOME!
