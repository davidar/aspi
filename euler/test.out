>>> % Add all the natural numbers below 1000 that are multiples of 3 or 5.
>>> #sum(0..999 multiple[3|5])?
--> what(F) :- A = 0, B = 999, F = #sum { E : E = A..B, E \ D = 0, disjunction1(D) }.
    disjunction1(C) :- C = 3.
    disjunction1(C) :- C = 5.
that(233168).

>>> 
>>> % Find the sum of all the even-valued terms in the Fibonacci sequence which do not exceed one million.
>>> fib[0] := 0.
--> fib(B,A) :- B = 0, A = 0.
understood.

>>> fib[1] := 1.
--> fib(B,A) :- B = 1, A = 1.
understood.

>>> fib[N 2..45] := fib[N-1] + fib[N-2].
--> fib(L,C) :- A = 2, B = 45, D = MuN, E = 1, fib(G,F), F = D-E, H = MuN, I = 2, fib(K,J), J = H-I, L = G+K, C = MuN, C = A..B.
understood.

>>> fib[0..45]?
--> what(D) :- A = 0, B = 45, fib(D,C), C = A..B.
that(0 | 1 | 2 | 3 | 5 | 8 | 13 | 21 | 34 | 55 | 89 | 144 | 233 | 377 | 610 | 987 | 1597 | 2584 | 4181 | 6765 | 10946 | 17711 | 28657 | 46368 | 75025 | 121393 | 196418 | 317811 | 514229 | 832040 | 1346269 | 2178309 | 3524578 | 5702887 | 9227465 | 14930352 | 24157817 | 39088169 | 63245986 | 102334155 | 165580141 | 267914296 | 433494437 | 701408733 | 1134903170).

>>> #sum(even fib[0..45] (<).1000000)?
--> what(F) :- A = 0, B = 45, F = #sum { E : E \ 2 = 0, fib(E,C), C = A..B, E<D, D = 1000000 }.
that(1089154).

>>> 
>>> % Find the largest prime factor of 42.
>>> composite := N 1..1000 multiple[2..(N-1)].
--> composite(H) :- A = 1, B = 1000, C = 2, D = MuN, E = 1, F = D-E, H = MuN, H = A..B, H \ G = 0, G = C..F.
understood.

>>> prime := 2..1000 ~composite.
--> prime(C) :- A = 2, B = 1000, C = A..B, not composite(C).
understood.

>>> prime?
--> what(A) :- prime(A).
that(2 | 3 | 5 | 7 | 11 | 13 | 17 | 19 | 23 | 29 | 31 | 37 | 41 | 43 | 47 | 53 | 59 | 61 | 67 | 71 | 73 | 79 | 83 | 89 | 97 | 101 | 103 | 107 | 109 | 113 | 127 | 131 | 137 | 139 | 149 | 151 | 157 | 163 | 167 | 173 | 179 | 181 | 191 | 193 | 197 | 199 | 211 | 223 | 227 | 229 | 233 | 239 | 241 | 251 | 257 | 263 | 269 | 271 | 277 | 281 | 283 | 293 | 307 | 311 | 313 | 317 | 331 | 337 | 347 | 349 | 353 | 359 | 367 | 373 | 379 | 383 | 389 | 397 | 401 | 409 | 419 | 421 | 431 | 433 | 439 | 443 | 449 | 457 | 461 | 463 | 467 | 479 | 487 | 491 | 499 | 503 | 509 | 521 | 523 | 541 | 547 | 557 | 563 | 569 | 571 | 577 | 587 | 593 | 599 | 601 | 607 | 613 | 617 | 619 | 631 | 641 | 643 | 647 | 653 | 659 | 661 | 673 | 677 | 683 | 691 | 701 | 709 | 719 | 727 | 733 | 739 | 743 | 751 | 757 | 761 | 769 | 773 | 787 | 797 | 809 | 811 | 821 | 823 | 827 | 829 | 839 | 853 | 857 | 859 | 863 | 877 | 881 | 883 | 887 | 907 | 911 | 919 | 929 | 937 | 941 | 947 | 953 | 967 | 971 | 977 | 983 | 991 | 997).

>>> factor[X 1..1000] := prime multiple'[X].
--> factor(E,C) :- A = 1, B = 1000, prime(E), D \ E = 0, D = MuX, C = MuX, C = A..B.
understood.

>>> factor.42?
--> what(B) :- factor(B,A), A = 42.
that(2 | 3 | 7).

>>> #most((>), factor.42)?
--> what(C) :- C>B : factor(B,A), A = 42, C != B; factor(C,A), A = 42.
that(7).

>>> thanks.
YOU'RE WELCOME!
